!function webpackUniversalModuleDefinition(root,factory){"object"==typeof exports&&"object"==typeof module?module.exports=factory():"function"==typeof define&&define.amd?define([],factory):"object"==typeof exports?exports.madhatter=factory():root.madhatter=factory()}(this,function(){return function(modules){function __webpack_require__(moduleId){if(installedModules[moduleId])return installedModules[moduleId].exports;var module=installedModules[moduleId]={exports:{},id:moduleId,loaded:!1};return modules[moduleId].call(module.exports,module,module.exports,__webpack_require__),module.loaded=!0,module.exports}var installedModules={};return __webpack_require__.m=modules,__webpack_require__.c=installedModules,__webpack_require__.p="",__webpack_require__(0)}([function(module,exports,__webpack_require__){"use strict";var asea=__webpack_require__(1),esprima=__webpack_require__(21);if(asea.SERVER){__webpack_require__(!function webpackMissingModule(){var e=new Error('Cannot find module "syntax-error"');throw e.code="MODULE_NOT_FOUND",e}()),__webpack_require__(!function webpackMissingModule(){var e=new Error('Cannot find module "fs"');throw e.code="MODULE_NOT_FOUND",e}()),__webpack_require__(!function webpackMissingModule(){var e=new Error('Cannot find module "unused"');throw e.code="MODULE_NOT_FOUND",e}())}var madhatter=function madhatter(script){if(asea.client){try{esprima.parse(script)}catch(error){return error}return!1}if(asea.server){if(/^(\.*\~*\/*[a-zA-Z0-9\_\-\.\~]+)+(\.[a-zA-Z0-9\_\-]+)+$/.test(script)){try{fs.accessSync(script)}catch(error){return error}script=fs.readFileSync(script,"utf8")}try{esprima.parse(script)}catch(error){return error}var error=check(script);if(error)return error;var unusedVariable=unused(script).filter(function onEachUnused(variable){return!variable.param}).map(function onEachUnused(variable){var name=variable.name,loc=variable.loc;return name+":( "+loc.line+", "+loc.column+" )"});return!!unusedVariable.length&&new Error("error unused variable, "+unusedVariable.join(", ")+", "+script)}return!0};module.exports=madhatter},function(module,exports,__webpack_require__){(function(global){"use strict";var harden=__webpack_require__(2);harden("CLIENT","client"),harden("SERVER","server"),harden("UNKNOWN","unknown");var asea=function asea(){return asea.client?CLIENT:asea.server?SERVER:UNKNOWN};harden("client","undefined"!=typeof window&&"undefined"!=typeof document&&"function"==typeof window.constructor&&"function"==typeof document.constructor&&"Window"==window.constructor.name&&"HTMLDocument"==document.constructor.name,asea),harden("server","undefined"!=typeof module&&"undefined"!=typeof global&&!!module.exports&&!!global.process&&!!global.process.env,asea),harden("unknown",asea.client===!1&&asea.server===!1,asea),module.exports=asea}).call(exports,function(){return this}())},function(module,exports,__webpack_require__){(function(global){"use strict";function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}var _defineProperty=__webpack_require__(3),_defineProperty2=_interopRequireDefault(_defineProperty),harden=function harden(property,value,entity){if(""===property||"string"!=typeof property)throw new Error("invalid property");var self=this;if("undefined"!=typeof entity?self=entity:"undefined"!=typeof global&&this===global?self=global:"undefined"!=typeof window&&this===window&&(self=window),entity=entity||self,"undefined"==typeof entity&&"undefined"!=typeof global?entity=global:"undefined"==typeof entity&&"undefined"!=typeof window&&(entity=window),"undefined"!=typeof entity[property])return entity;try{(0,_defineProperty2.default)(entity,property,{enumerable:!1,configurable:!1,writable:!1,value:value})}catch(error){throw new Error("cannot harden property, "+property+", error, "+error)}if(("undefined"!=typeof global&&entity!==global||"undefined"!=typeof window&&entity!==window)&&"undefined"==typeof entity.harden)try{Object.defineProperty(entity,"harden",{enumerable:!1,configurable:!1,writable:!1,value:harden.bind(self)})}catch(error){throw new Error("cannot bind harden, error, "+error)}return entity};module.exports=harden}).call(exports,function(){return this}())},function(module,exports,__webpack_require__){module.exports={default:__webpack_require__(4),__esModule:!0}},function(module,exports,__webpack_require__){__webpack_require__(5);var $Object=__webpack_require__(8).Object;module.exports=function defineProperty(it,key,desc){return $Object.defineProperty(it,key,desc)}},function(module,exports,__webpack_require__){var $export=__webpack_require__(6);$export($export.S+$export.F*!__webpack_require__(16),"Object",{defineProperty:__webpack_require__(12).f})},function(module,exports,__webpack_require__){var global=__webpack_require__(7),core=__webpack_require__(8),ctx=__webpack_require__(9),hide=__webpack_require__(11),PROTOTYPE="prototype",$export=function(type,name,source){var key,own,out,IS_FORCED=type&$export.F,IS_GLOBAL=type&$export.G,IS_STATIC=type&$export.S,IS_PROTO=type&$export.P,IS_BIND=type&$export.B,IS_WRAP=type&$export.W,exports=IS_GLOBAL?core:core[name]||(core[name]={}),expProto=exports[PROTOTYPE],target=IS_GLOBAL?global:IS_STATIC?global[name]:(global[name]||{})[PROTOTYPE];IS_GLOBAL&&(source=name);for(key in source)own=!IS_FORCED&&target&&void 0!==target[key],own&&key in exports||(out=own?target[key]:source[key],exports[key]=IS_GLOBAL&&"function"!=typeof target[key]?source[key]:IS_BIND&&own?ctx(out,global):IS_WRAP&&target[key]==out?function(C){var F=function(a,b,c){if(this instanceof C){switch(arguments.length){case 0:return new C;case 1:return new C(a);case 2:return new C(a,b)}return new C(a,b,c)}return C.apply(this,arguments)};return F[PROTOTYPE]=C[PROTOTYPE],F}(out):IS_PROTO&&"function"==typeof out?ctx(Function.call,out):out,IS_PROTO&&((exports.virtual||(exports.virtual={}))[key]=out,type&$export.R&&expProto&&!expProto[key]&&hide(expProto,key,out)))};$export.F=1,$export.G=2,$export.S=4,$export.P=8,$export.B=16,$export.W=32,$export.U=64,$export.R=128,module.exports=$export},function(module,exports){var global=module.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=global)},function(module,exports){var core=module.exports={version:"2.4.0"};"number"==typeof __e&&(__e=core)},function(module,exports,__webpack_require__){var aFunction=__webpack_require__(10);module.exports=function(fn,that,length){if(aFunction(fn),void 0===that)return fn;switch(length){case 1:return function(a){return fn.call(that,a)};case 2:return function(a,b){return fn.call(that,a,b)};case 3:return function(a,b,c){return fn.call(that,a,b,c)}}return function(){return fn.apply(that,arguments)}}},function(module,exports){module.exports=function(it){if("function"!=typeof it)throw TypeError(it+" is not a function!");return it}},function(module,exports,__webpack_require__){var dP=__webpack_require__(12),createDesc=__webpack_require__(20);module.exports=__webpack_require__(16)?function(object,key,value){return dP.f(object,key,createDesc(1,value))}:function(object,key,value){return object[key]=value,object}},function(module,exports,__webpack_require__){var anObject=__webpack_require__(13),IE8_DOM_DEFINE=__webpack_require__(15),toPrimitive=__webpack_require__(19),dP=Object.defineProperty;exports.f=__webpack_require__(16)?Object.defineProperty:function defineProperty(O,P,Attributes){if(anObject(O),P=toPrimitive(P,!0),anObject(Attributes),IE8_DOM_DEFINE)try{return dP(O,P,Attributes)}catch(e){}if("get"in Attributes||"set"in Attributes)throw TypeError("Accessors not supported!");return"value"in Attributes&&(O[P]=Attributes.value),O}},function(module,exports,__webpack_require__){var isObject=__webpack_require__(14);module.exports=function(it){if(!isObject(it))throw TypeError(it+" is not an object!");return it}},function(module,exports){module.exports=function(it){return"object"==typeof it?null!==it:"function"==typeof it}},function(module,exports,__webpack_require__){module.exports=!__webpack_require__(16)&&!__webpack_require__(17)(function(){return 7!=Object.defineProperty(__webpack_require__(18)("div"),"a",{get:function(){return 7}}).a})},function(module,exports,__webpack_require__){module.exports=!__webpack_require__(17)(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})},function(module,exports){module.exports=function(exec){try{return!!exec()}catch(e){return!0}}},function(module,exports,__webpack_require__){var isObject=__webpack_require__(14),document=__webpack_require__(7).document,is=isObject(document)&&isObject(document.createElement);module.exports=function(it){return is?document.createElement(it):{}}},function(module,exports,__webpack_require__){var isObject=__webpack_require__(14);module.exports=function(it,S){if(!isObject(it))return it;var fn,val;if(S&&"function"==typeof(fn=it.toString)&&!isObject(val=fn.call(it)))return val;if("function"==typeof(fn=it.valueOf)&&!isObject(val=fn.call(it)))return val;if(!S&&"function"==typeof(fn=it.toString)&&!isObject(val=fn.call(it)))return val;throw TypeError("Can't convert object to primitive value")}},function(module,exports){module.exports=function(bitmap,value){return{enumerable:!(1&bitmap),configurable:!(2&bitmap),writable:!(4&bitmap),value:value}}},function(module,exports,__webpack_require__){!function webpackUniversalModuleDefinition(root,factory){module.exports=factory()}(this,function(){return function(modules){function __webpack_require__(moduleId){if(installedModules[moduleId])return installedModules[moduleId].exports;var module=installedModules[moduleId]={exports:{},id:moduleId,loaded:!1};return modules[moduleId].call(module.exports,module,module.exports,__webpack_require__),module.loaded=!0,module.exports}var installedModules={};return __webpack_require__.m=modules,__webpack_require__.c=installedModules,__webpack_require__.p="",__webpack_require__(0)}([function(module,exports,__webpack_require__){"use strict";function parse(code,options,delegate){var commentHandler=null,proxyDelegate=function(node,metadata){delegate&&delegate(node,metadata),commentHandler&&commentHandler.visit(node,metadata)},parserDelegate="function"==typeof delegate?proxyDelegate:null,collectComment=!1;if(options){collectComment="boolean"==typeof options.comment&&options.comment;var attachComment="boolean"==typeof options.attachComment&&options.attachComment;(collectComment||attachComment)&&(commentHandler=new comment_handler_1.CommentHandler,commentHandler.attach=attachComment,options.comment=!0,parserDelegate=proxyDelegate)}var parser;parser=options&&"boolean"==typeof options.jsx&&options.jsx?new jsx_parser_1.JSXParser(code,options,parserDelegate):new parser_1.Parser(code,options,parserDelegate);var ast=parser.parseProgram();return collectComment&&(ast.comments=commentHandler.comments),parser.config.tokens&&(ast.tokens=parser.tokens),parser.config.tolerant&&(ast.errors=parser.errorHandler.errors),ast}function tokenize(code,options,delegate){var tokens,tokenizer=new tokenizer_1.Tokenizer(code,options);tokens=[];try{for(;;){var token=tokenizer.getNextToken();if(!token)break;delegate&&(token=delegate(token)),tokens.push(token)}}catch(e){tokenizer.errorHandler.tolerate(e)}return tokenizer.errorHandler.tolerant&&(tokens.errors=tokenizer.errors()),tokens}var comment_handler_1=__webpack_require__(1),parser_1=__webpack_require__(3),jsx_parser_1=__webpack_require__(11),tokenizer_1=__webpack_require__(15);exports.parse=parse,exports.tokenize=tokenize;var syntax_1=__webpack_require__(2);exports.Syntax=syntax_1.Syntax,exports.version="3.1.3"},function(module,exports,__webpack_require__){"use strict";var syntax_1=__webpack_require__(2),CommentHandler=function(){function CommentHandler(){this.attach=!1,this.comments=[],this.stack=[],this.leading=[],this.trailing=[]}return CommentHandler.prototype.insertInnerComments=function(node,metadata){if(node.type===syntax_1.Syntax.BlockStatement&&0===node.body.length){for(var innerComments=[],i=this.leading.length-1;i>=0;--i){var entry=this.leading[i];metadata.end.offset>=entry.start&&(innerComments.unshift(entry.comment),this.leading.splice(i,1),this.trailing.splice(i,1))}innerComments.length&&(node.innerComments=innerComments)}},CommentHandler.prototype.findTrailingComments=function(node,metadata){var trailingComments=[];if(this.trailing.length>0){for(var i=this.trailing.length-1;i>=0;--i){var entry_1=this.trailing[i];entry_1.start>=metadata.end.offset&&trailingComments.unshift(entry_1.comment)}return this.trailing.length=0,trailingComments}var entry=this.stack[this.stack.length-1];if(entry&&entry.node.trailingComments){var firstComment=entry.node.trailingComments[0];firstComment&&firstComment.range[0]>=metadata.end.offset&&(trailingComments=entry.node.trailingComments,delete entry.node.trailingComments)}return trailingComments},CommentHandler.prototype.findLeadingComments=function(node,metadata){for(var target,leadingComments=[];this.stack.length>0;){var entry=this.stack[this.stack.length-1];if(!(entry&&entry.start>=metadata.start.offset))break;target=this.stack.pop().node}if(target){for(var count=target.leadingComments?target.leadingComments.length:0,i=count-1;i>=0;--i){var comment=target.leadingComments[i];comment.range[1]<=metadata.start.offset&&(leadingComments.unshift(comment),target.leadingComments.splice(i,1))}return target.leadingComments&&0===target.leadingComments.length&&delete target.leadingComments,leadingComments}for(var i=this.leading.length-1;i>=0;--i){var entry=this.leading[i];entry.start<=metadata.start.offset&&(leadingComments.unshift(entry.comment),this.leading.splice(i,1))}return leadingComments},CommentHandler.prototype.visitNode=function(node,metadata){if(!(node.type===syntax_1.Syntax.Program&&node.body.length>0)){this.insertInnerComments(node,metadata);var trailingComments=this.findTrailingComments(node,metadata),leadingComments=this.findLeadingComments(node,metadata);leadingComments.length>0&&(node.leadingComments=leadingComments),trailingComments.length>0&&(node.trailingComments=trailingComments),this.stack.push({node:node,start:metadata.start.offset})}},CommentHandler.prototype.visitComment=function(node,metadata){var type="L"===node.type[0]?"Line":"Block",comment={type:type,value:node.value};if(node.range&&(comment.range=node.range),node.loc&&(comment.loc=node.loc),this.comments.push(comment),this.attach){var entry={comment:{type:type,value:node.value,range:[metadata.start.offset,metadata.end.offset]},start:metadata.start.offset};node.loc&&(entry.comment.loc=node.loc),node.type=type,this.leading.push(entry),this.trailing.push(entry)}},CommentHandler.prototype.visit=function(node,metadata){"LineComment"===node.type?this.visitComment(node,metadata):"BlockComment"===node.type?this.visitComment(node,metadata):this.attach&&this.visitNode(node,metadata)},CommentHandler}();exports.CommentHandler=CommentHandler},function(module,exports){"use strict";exports.Syntax={AssignmentExpression:"AssignmentExpression",AssignmentPattern:"AssignmentPattern",ArrayExpression:"ArrayExpression",ArrayPattern:"ArrayPattern",ArrowFunctionExpression:"ArrowFunctionExpression",BlockStatement:"BlockStatement",BinaryExpression:"BinaryExpression",BreakStatement:"BreakStatement",CallExpression:"CallExpression",CatchClause:"CatchClause",ClassBody:"ClassBody",ClassDeclaration:"ClassDeclaration",ClassExpression:"ClassExpression",ConditionalExpression:"ConditionalExpression",ContinueStatement:"ContinueStatement",DoWhileStatement:"DoWhileStatement",DebuggerStatement:"DebuggerStatement",EmptyStatement:"EmptyStatement",ExportAllDeclaration:"ExportAllDeclaration",ExportDefaultDeclaration:"ExportDefaultDeclaration",ExportNamedDeclaration:"ExportNamedDeclaration",ExportSpecifier:"ExportSpecifier",ExpressionStatement:"ExpressionStatement",ForStatement:"ForStatement",ForOfStatement:"ForOfStatement",ForInStatement:"ForInStatement",FunctionDeclaration:"FunctionDeclaration",FunctionExpression:"FunctionExpression",Identifier:"Identifier",IfStatement:"IfStatement",ImportDeclaration:"ImportDeclaration",ImportDefaultSpecifier:"ImportDefaultSpecifier",ImportNamespaceSpecifier:"ImportNamespaceSpecifier",ImportSpecifier:"ImportSpecifier",Literal:"Literal",LabeledStatement:"LabeledStatement",LogicalExpression:"LogicalExpression",MemberExpression:"MemberExpression",MetaProperty:"MetaProperty",MethodDefinition:"MethodDefinition",NewExpression:"NewExpression",ObjectExpression:"ObjectExpression",ObjectPattern:"ObjectPattern",Program:"Program",Property:"Property",RestElement:"RestElement",ReturnStatement:"ReturnStatement",SequenceExpression:"SequenceExpression",SpreadElement:"SpreadElement",Super:"Super",SwitchCase:"SwitchCase",SwitchStatement:"SwitchStatement",TaggedTemplateExpression:"TaggedTemplateExpression",TemplateElement:"TemplateElement",TemplateLiteral:"TemplateLiteral",ThisExpression:"ThisExpression",ThrowStatement:"ThrowStatement",TryStatement:"TryStatement",UnaryExpression:"UnaryExpression",UpdateExpression:"UpdateExpression",VariableDeclaration:"VariableDeclaration",VariableDeclarator:"VariableDeclarator",WhileStatement:"WhileStatement",WithStatement:"WithStatement",YieldExpression:"YieldExpression"}},function(module,exports,__webpack_require__){"use strict";var assert_1=__webpack_require__(4),messages_1=__webpack_require__(5),error_handler_1=__webpack_require__(6),token_1=__webpack_require__(7),scanner_1=__webpack_require__(8),syntax_1=__webpack_require__(2),Node=__webpack_require__(10),ArrowParameterPlaceHolder="ArrowParameterPlaceHolder",Parser=function(){function Parser(code,options,delegate){void 0===options&&(options={}),this.config={range:"boolean"==typeof options.range&&options.range,loc:"boolean"==typeof options.loc&&options.loc,source:null,tokens:"boolean"==typeof options.tokens&&options.tokens,comment:"boolean"==typeof options.comment&&options.comment,tolerant:"boolean"==typeof options.tolerant&&options.tolerant},this.config.loc&&options.source&&null!==options.source&&(this.config.source=String(options.source)),this.delegate=delegate,this.errorHandler=new error_handler_1.ErrorHandler,this.errorHandler.tolerant=this.config.tolerant,this.scanner=new scanner_1.Scanner(code,this.errorHandler),this.scanner.trackComment=this.config.comment,this.operatorPrecedence={")":0,";":0,",":0,"=":0,"]":0,"||":1,"&&":2,"|":3,"^":4,"&":5,"==":6,"!=":6,"===":6,"!==":6,"<":7,">":7,"<=":7,">=":7,"<<":8,">>":8,">>>":8,"+":9,"-":9,"*":11,"/":11,"%":11},this.sourceType=options&&"module"===options.sourceType?"module":"script",this.lookahead=null,this.hasLineTerminator=!1,this.context={allowIn:!0,allowYield:!0,firstCoverInitializedNameError:null,isAssignmentTarget:!1,isBindingElement:!1,inFunctionBody:!1,inIteration:!1,inSwitch:!1,labelSet:{},strict:"module"===this.sourceType},this.tokens=[],this.startMarker={index:0,lineNumber:this.scanner.lineNumber,lineStart:0},this.lastMarker={index:0,lineNumber:this.scanner.lineNumber,lineStart:0},this.nextToken(),this.lastMarker={index:this.scanner.index,lineNumber:this.scanner.lineNumber,lineStart:this.scanner.lineStart}}return Parser.prototype.throwError=function(messageFormat){for(var values=[],_i=1;_i<arguments.length;_i++)values[_i-1]=arguments[_i];var args=Array.prototype.slice.call(arguments,1),msg=messageFormat.replace(/%(\d)/g,function(whole,idx){return assert_1.assert(idx<args.length,"Message reference must be in range"),args[idx]}),index=this.lastMarker.index,line=this.lastMarker.lineNumber,column=this.lastMarker.index-this.lastMarker.lineStart+1;throw this.errorHandler.createError(index,line,column,msg)},Parser.prototype.tolerateError=function(messageFormat){for(var values=[],_i=1;_i<arguments.length;_i++)values[_i-1]=arguments[_i];var args=Array.prototype.slice.call(arguments,1),msg=messageFormat.replace(/%(\d)/g,function(whole,idx){return assert_1.assert(idx<args.length,"Message reference must be in range"),args[idx]}),index=this.lastMarker.index,line=this.scanner.lineNumber,column=this.lastMarker.index-this.lastMarker.lineStart+1;this.errorHandler.tolerateError(index,line,column,msg)},Parser.prototype.unexpectedTokenError=function(token,message){var value,msg=message||messages_1.Messages.UnexpectedToken;if(token?(message||(msg=token.type===token_1.Token.EOF?messages_1.Messages.UnexpectedEOS:token.type===token_1.Token.Identifier?messages_1.Messages.UnexpectedIdentifier:token.type===token_1.Token.NumericLiteral?messages_1.Messages.UnexpectedNumber:token.type===token_1.Token.StringLiteral?messages_1.Messages.UnexpectedString:token.type===token_1.Token.Template?messages_1.Messages.UnexpectedTemplate:messages_1.Messages.UnexpectedToken,token.type===token_1.Token.Keyword&&(this.scanner.isFutureReservedWord(token.value)?msg=messages_1.Messages.UnexpectedReserved:this.context.strict&&this.scanner.isStrictModeReservedWord(token.value)&&(msg=messages_1.Messages.StrictReservedWord))),value=token.type===token_1.Token.Template?token.value.raw:token.value):value="ILLEGAL",msg=msg.replace("%0",value),token&&"number"==typeof token.lineNumber){var index=token.start,line=token.lineNumber,column=token.start-this.lastMarker.lineStart+1;return this.errorHandler.createError(index,line,column,msg)}var index=this.lastMarker.index,line=this.lastMarker.lineNumber,column=index-this.lastMarker.lineStart+1;return this.errorHandler.createError(index,line,column,msg)},Parser.prototype.throwUnexpectedToken=function(token,message){throw this.unexpectedTokenError(token,message)},Parser.prototype.tolerateUnexpectedToken=function(token,message){this.errorHandler.tolerate(this.unexpectedTokenError(token,message))},Parser.prototype.collectComments=function(){if(this.config.comment){var comments=this.scanner.scanComments();if(comments.length>0&&this.delegate)for(var i=0;i<comments.length;++i){var e=comments[i],node=void 0;node={type:e.multiLine?"BlockComment":"LineComment",value:this.scanner.source.slice(e.slice[0],e.slice[1])},this.config.range&&(node.range=e.range),this.config.loc&&(node.loc=e.loc);var metadata={start:{line:e.loc.start.line,column:e.loc.start.column,offset:e.range[0]},end:{line:e.loc.end.line,column:e.loc.end.column,offset:e.range[1]}};this.delegate(node,metadata)}}else this.scanner.scanComments()},Parser.prototype.getTokenRaw=function(token){return this.scanner.source.slice(token.start,token.end)},Parser.prototype.convertToken=function(token){var t;return t={type:token_1.TokenName[token.type],value:this.getTokenRaw(token)},this.config.range&&(t.range=[token.start,token.end]),this.config.loc&&(t.loc={start:{line:this.startMarker.lineNumber,column:this.startMarker.index-this.startMarker.lineStart},end:{line:this.scanner.lineNumber,column:this.scanner.index-this.scanner.lineStart}}),token.regex&&(t.regex=token.regex),t},Parser.prototype.nextToken=function(){var token=this.lookahead;this.lastMarker.index=this.scanner.index,this.lastMarker.lineNumber=this.scanner.lineNumber,this.lastMarker.lineStart=this.scanner.lineStart,this.collectComments(),this.startMarker.index=this.scanner.index,this.startMarker.lineNumber=this.scanner.lineNumber,this.startMarker.lineStart=this.scanner.lineStart;var next;return next=this.scanner.lex(),this.hasLineTerminator=!(!token||!next)&&token.lineNumber!==next.lineNumber,next&&this.context.strict&&next.type===token_1.Token.Identifier&&this.scanner.isStrictModeReservedWord(next.value)&&(next.type=token_1.Token.Keyword),this.lookahead=next,this.config.tokens&&next.type!==token_1.Token.EOF&&this.tokens.push(this.convertToken(next)),token},Parser.prototype.nextRegexToken=function(){this.collectComments();var token=this.scanner.scanRegExp();return this.config.tokens&&(this.tokens.pop(),this.tokens.push(this.convertToken(token))),this.lookahead=token,this.nextToken(),token},Parser.prototype.createNode=function(){return{index:this.startMarker.index,line:this.startMarker.lineNumber,column:this.startMarker.index-this.startMarker.lineStart}},Parser.prototype.startNode=function(token){return{index:token.start,line:token.lineNumber,column:token.start-token.lineStart}},Parser.prototype.finalize=function(meta,node){if(this.config.range&&(node.range=[meta.index,this.lastMarker.index]),this.config.loc&&(node.loc={start:{line:meta.line,column:meta.column},end:{line:this.lastMarker.lineNumber,column:this.lastMarker.index-this.lastMarker.lineStart}},this.config.source&&(node.loc.source=this.config.source)),this.delegate){var metadata={start:{line:meta.line,column:meta.column,offset:meta.index},end:{line:this.lastMarker.lineNumber,column:this.lastMarker.index-this.lastMarker.lineStart,offset:this.lastMarker.index}};this.delegate(node,metadata)}return node},Parser.prototype.expect=function(value){var token=this.nextToken();token.type===token_1.Token.Punctuator&&token.value===value||this.throwUnexpectedToken(token)},Parser.prototype.expectCommaSeparator=function(){if(this.config.tolerant){var token=this.lookahead;token.type===token_1.Token.Punctuator&&","===token.value?this.nextToken():token.type===token_1.Token.Punctuator&&";"===token.value?(this.nextToken(),this.tolerateUnexpectedToken(token)):this.tolerateUnexpectedToken(token,messages_1.Messages.UnexpectedToken)}else this.expect(",")},Parser.prototype.expectKeyword=function(keyword){var token=this.nextToken();token.type===token_1.Token.Keyword&&token.value===keyword||this.throwUnexpectedToken(token)},Parser.prototype.match=function(value){return this.lookahead.type===token_1.Token.Punctuator&&this.lookahead.value===value},Parser.prototype.matchKeyword=function(keyword){return this.lookahead.type===token_1.Token.Keyword&&this.lookahead.value===keyword},Parser.prototype.matchContextualKeyword=function(keyword){return this.lookahead.type===token_1.Token.Identifier&&this.lookahead.value===keyword},Parser.prototype.matchAssign=function(){if(this.lookahead.type!==token_1.Token.Punctuator)return!1;var op=this.lookahead.value;return"="===op||"*="===op||"**="===op||"/="===op||"%="===op||"+="===op||"-="===op||"<<="===op||">>="===op||">>>="===op||"&="===op||"^="===op||"|="===op},Parser.prototype.isolateCoverGrammar=function(parseFunction){var previousIsBindingElement=this.context.isBindingElement,previousIsAssignmentTarget=this.context.isAssignmentTarget,previousFirstCoverInitializedNameError=this.context.firstCoverInitializedNameError;this.context.isBindingElement=!0,this.context.isAssignmentTarget=!0,this.context.firstCoverInitializedNameError=null;var result=parseFunction.call(this);return null!==this.context.firstCoverInitializedNameError&&this.throwUnexpectedToken(this.context.firstCoverInitializedNameError),this.context.isBindingElement=previousIsBindingElement,this.context.isAssignmentTarget=previousIsAssignmentTarget,this.context.firstCoverInitializedNameError=previousFirstCoverInitializedNameError,result},Parser.prototype.inheritCoverGrammar=function(parseFunction){var previousIsBindingElement=this.context.isBindingElement,previousIsAssignmentTarget=this.context.isAssignmentTarget,previousFirstCoverInitializedNameError=this.context.firstCoverInitializedNameError;this.context.isBindingElement=!0,this.context.isAssignmentTarget=!0,this.context.firstCoverInitializedNameError=null;var result=parseFunction.call(this);return this.context.isBindingElement=this.context.isBindingElement&&previousIsBindingElement,this.context.isAssignmentTarget=this.context.isAssignmentTarget&&previousIsAssignmentTarget,this.context.firstCoverInitializedNameError=previousFirstCoverInitializedNameError||this.context.firstCoverInitializedNameError,result},Parser.prototype.consumeSemicolon=function(){this.match(";")?this.nextToken():this.hasLineTerminator||(this.lookahead.type===token_1.Token.EOF||this.match("}")||this.throwUnexpectedToken(this.lookahead),this.lastMarker.index=this.startMarker.index,this.lastMarker.lineNumber=this.startMarker.lineNumber,this.lastMarker.lineStart=this.startMarker.lineStart)},Parser.prototype.parsePrimaryExpression=function(){var expr,value,token,raw,node=this.createNode();switch(this.lookahead.type){case token_1.Token.Identifier:"module"===this.sourceType&&"await"===this.lookahead.value&&this.tolerateUnexpectedToken(this.lookahead),expr=this.finalize(node,new Node.Identifier(this.nextToken().value));break;case token_1.Token.NumericLiteral:case token_1.Token.StringLiteral:this.context.strict&&this.lookahead.octal&&this.tolerateUnexpectedToken(this.lookahead,messages_1.Messages.StrictOctalLiteral),this.context.isAssignmentTarget=!1,this.context.isBindingElement=!1,token=this.nextToken(),raw=this.getTokenRaw(token),expr=this.finalize(node,new Node.Literal(token.value,raw));break;case token_1.Token.BooleanLiteral:this.context.isAssignmentTarget=!1,this.context.isBindingElement=!1,token=this.nextToken(),token.value="true"===token.value,raw=this.getTokenRaw(token),expr=this.finalize(node,new Node.Literal(token.value,raw));break;case token_1.Token.NullLiteral:this.context.isAssignmentTarget=!1,this.context.isBindingElement=!1,token=this.nextToken(),token.value=null,raw=this.getTokenRaw(token),expr=this.finalize(node,new Node.Literal(token.value,raw));break;case token_1.Token.Template:expr=this.parseTemplateLiteral();break;case token_1.Token.Punctuator:switch(value=this.lookahead.value){case"(":this.context.isBindingElement=!1,expr=this.inheritCoverGrammar(this.parseGroupExpression);break;case"[":expr=this.inheritCoverGrammar(this.parseArrayInitializer);break;case"{":expr=this.inheritCoverGrammar(this.parseObjectInitializer);break;case"/":case"/=":this.context.isAssignmentTarget=!1,this.context.isBindingElement=!1,this.scanner.index=this.startMarker.index,token=this.nextRegexToken(),raw=this.getTokenRaw(token),expr=this.finalize(node,new Node.RegexLiteral(token.value,raw,token.regex));break;default:this.throwUnexpectedToken(this.nextToken())}break;case token_1.Token.Keyword:!this.context.strict&&this.context.allowYield&&this.matchKeyword("yield")?expr=this.parseIdentifierName():!this.context.strict&&this.matchKeyword("let")?expr=this.finalize(node,new Node.Identifier(this.nextToken().value)):(this.context.isAssignmentTarget=!1,this.context.isBindingElement=!1,this.matchKeyword("function")?expr=this.parseFunctionExpression():this.matchKeyword("this")?(this.nextToken(),expr=this.finalize(node,new Node.ThisExpression)):this.matchKeyword("class")?expr=this.parseClassExpression():this.throwUnexpectedToken(this.nextToken()));break;default:this.throwUnexpectedToken(this.nextToken())}return expr},Parser.prototype.parseSpreadElement=function(){var node=this.createNode();this.expect("...");var arg=this.inheritCoverGrammar(this.parseAssignmentExpression);return this.finalize(node,new Node.SpreadElement(arg))},Parser.prototype.parseArrayInitializer=function(){var node=this.createNode(),elements=[];for(this.expect("[");!this.match("]");)if(this.match(","))this.nextToken(),elements.push(null);else if(this.match("...")){var element=this.parseSpreadElement();this.match("]")||(this.context.isAssignmentTarget=!1,this.context.isBindingElement=!1,this.expect(",")),elements.push(element)}else elements.push(this.inheritCoverGrammar(this.parseAssignmentExpression)),this.match("]")||this.expect(",");return this.expect("]"),this.finalize(node,new Node.ArrayExpression(elements))},Parser.prototype.parsePropertyMethod=function(params){this.context.isAssignmentTarget=!1,this.context.isBindingElement=!1;var previousStrict=this.context.strict,body=this.isolateCoverGrammar(this.parseFunctionSourceElements);return this.context.strict&&params.firstRestricted&&this.tolerateUnexpectedToken(params.firstRestricted,params.message),this.context.strict&&params.stricted&&this.tolerateUnexpectedToken(params.stricted,params.message),this.context.strict=previousStrict,body},Parser.prototype.parsePropertyMethodFunction=function(){var isGenerator=!1,node=this.createNode(),previousAllowYield=this.context.allowYield;this.context.allowYield=!1;var params=this.parseFormalParameters(),method=this.parsePropertyMethod(params);return this.context.allowYield=previousAllowYield,this.finalize(node,new Node.FunctionExpression(null,params.params,method,isGenerator));
},Parser.prototype.parseObjectPropertyKey=function(){var node=this.createNode(),token=this.nextToken(),key=null;switch(token.type){case token_1.Token.StringLiteral:case token_1.Token.NumericLiteral:this.context.strict&&token.octal&&this.tolerateUnexpectedToken(token,messages_1.Messages.StrictOctalLiteral);var raw=this.getTokenRaw(token);key=this.finalize(node,new Node.Literal(token.value,raw));break;case token_1.Token.Identifier:case token_1.Token.BooleanLiteral:case token_1.Token.NullLiteral:case token_1.Token.Keyword:key=this.finalize(node,new Node.Identifier(token.value));break;case token_1.Token.Punctuator:"["===token.value?(key=this.isolateCoverGrammar(this.parseAssignmentExpression),this.expect("]")):this.throwUnexpectedToken(token);break;default:this.throwUnexpectedToken(token)}return key},Parser.prototype.isPropertyKey=function(key,value){return key.type===syntax_1.Syntax.Identifier&&key.name===value||key.type===syntax_1.Syntax.Literal&&key.value===value},Parser.prototype.parseObjectProperty=function(hasProto){var kind,key,value,node=this.createNode(),token=this.lookahead,computed=!1,method=!1,shorthand=!1;token.type===token_1.Token.Identifier?(this.nextToken(),key=this.finalize(node,new Node.Identifier(token.value))):this.match("*")?this.nextToken():(computed=this.match("["),key=this.parseObjectPropertyKey());var lookaheadPropertyKey=this.qualifiedPropertyName(this.lookahead);if(token.type===token_1.Token.Identifier&&"get"===token.value&&lookaheadPropertyKey)kind="get",computed=this.match("["),key=this.parseObjectPropertyKey(),this.context.allowYield=!1,value=this.parseGetterMethod();else if(token.type===token_1.Token.Identifier&&"set"===token.value&&lookaheadPropertyKey)kind="set",computed=this.match("["),key=this.parseObjectPropertyKey(),value=this.parseSetterMethod();else if(token.type===token_1.Token.Punctuator&&"*"===token.value&&lookaheadPropertyKey)kind="init",computed=this.match("["),key=this.parseObjectPropertyKey(),value=this.parseGeneratorMethod(),method=!0;else if(key||this.throwUnexpectedToken(this.lookahead),kind="init",this.match(":"))!computed&&this.isPropertyKey(key,"__proto__")&&(hasProto.value&&this.tolerateError(messages_1.Messages.DuplicateProtoProperty),hasProto.value=!0),this.nextToken(),value=this.inheritCoverGrammar(this.parseAssignmentExpression);else if(this.match("("))value=this.parsePropertyMethodFunction(),method=!0;else if(token.type===token_1.Token.Identifier){var id=this.finalize(node,new Node.Identifier(token.value));if(this.match("=")){this.context.firstCoverInitializedNameError=this.lookahead,this.nextToken(),shorthand=!0;var init=this.isolateCoverGrammar(this.parseAssignmentExpression);value=this.finalize(node,new Node.AssignmentPattern(id,init))}else shorthand=!0,value=id}else this.throwUnexpectedToken(this.nextToken());return this.finalize(node,new Node.Property(kind,key,computed,value,method,shorthand))},Parser.prototype.parseObjectInitializer=function(){var node=this.createNode();this.expect("{");for(var properties=[],hasProto={value:!1};!this.match("}");)properties.push(this.parseObjectProperty(hasProto)),this.match("}")||this.expectCommaSeparator();return this.expect("}"),this.finalize(node,new Node.ObjectExpression(properties))},Parser.prototype.parseTemplateHead=function(){assert_1.assert(this.lookahead.head,"Template literal must start with a template head");var node=this.createNode(),token=this.nextToken(),value={raw:token.value.raw,cooked:token.value.cooked};return this.finalize(node,new Node.TemplateElement(value,token.tail))},Parser.prototype.parseTemplateElement=function(){this.lookahead.type!==token_1.Token.Template&&this.throwUnexpectedToken();var node=this.createNode(),token=this.nextToken(),value={raw:token.value.raw,cooked:token.value.cooked};return this.finalize(node,new Node.TemplateElement(value,token.tail))},Parser.prototype.parseTemplateLiteral=function(){var node=this.createNode(),expressions=[],quasis=[],quasi=this.parseTemplateHead();for(quasis.push(quasi);!quasi.tail;)expressions.push(this.parseExpression()),quasi=this.parseTemplateElement(),quasis.push(quasi);return this.finalize(node,new Node.TemplateLiteral(quasis,expressions))},Parser.prototype.reinterpretExpressionAsPattern=function(expr){switch(expr.type){case syntax_1.Syntax.Identifier:case syntax_1.Syntax.MemberExpression:case syntax_1.Syntax.RestElement:case syntax_1.Syntax.AssignmentPattern:break;case syntax_1.Syntax.SpreadElement:expr.type=syntax_1.Syntax.RestElement,this.reinterpretExpressionAsPattern(expr.argument);break;case syntax_1.Syntax.ArrayExpression:expr.type=syntax_1.Syntax.ArrayPattern;for(var i=0;i<expr.elements.length;i++)null!==expr.elements[i]&&this.reinterpretExpressionAsPattern(expr.elements[i]);break;case syntax_1.Syntax.ObjectExpression:expr.type=syntax_1.Syntax.ObjectPattern;for(var i=0;i<expr.properties.length;i++)this.reinterpretExpressionAsPattern(expr.properties[i].value);break;case syntax_1.Syntax.AssignmentExpression:expr.type=syntax_1.Syntax.AssignmentPattern,delete expr.operator,this.reinterpretExpressionAsPattern(expr.left)}},Parser.prototype.parseGroupExpression=function(){var expr;if(this.expect("("),this.match(")"))this.nextToken(),this.match("=>")||this.expect("=>"),expr={type:ArrowParameterPlaceHolder,params:[]};else{var startToken=this.lookahead,params=[];if(this.match("..."))expr=this.parseRestElement(params),this.expect(")"),this.match("=>")||this.expect("=>"),expr={type:ArrowParameterPlaceHolder,params:[expr]};else{var arrow=!1;if(this.context.isBindingElement=!0,expr=this.inheritCoverGrammar(this.parseAssignmentExpression),this.match(",")){var expressions=[];for(this.context.isAssignmentTarget=!1,expressions.push(expr);this.startMarker.index<this.scanner.length&&this.match(",");){if(this.nextToken(),this.match("...")){this.context.isBindingElement||this.throwUnexpectedToken(this.lookahead),expressions.push(this.parseRestElement(params)),this.expect(")"),this.match("=>")||this.expect("=>"),this.context.isBindingElement=!1;for(var i=0;i<expressions.length;i++)this.reinterpretExpressionAsPattern(expressions[i]);arrow=!0,expr={type:ArrowParameterPlaceHolder,params:expressions}}else expressions.push(this.inheritCoverGrammar(this.parseAssignmentExpression));if(arrow)break}arrow||(expr=this.finalize(this.startNode(startToken),new Node.SequenceExpression(expressions)))}if(!arrow){if(this.expect(")"),this.match("=>")&&(expr.type===syntax_1.Syntax.Identifier&&"yield"===expr.name&&(arrow=!0,expr={type:ArrowParameterPlaceHolder,params:[expr]}),!arrow)){if(this.context.isBindingElement||this.throwUnexpectedToken(this.lookahead),expr.type===syntax_1.Syntax.SequenceExpression)for(var i=0;i<expr.expressions.length;i++)this.reinterpretExpressionAsPattern(expr.expressions[i]);else this.reinterpretExpressionAsPattern(expr);var params_1=expr.type===syntax_1.Syntax.SequenceExpression?expr.expressions:[expr];expr={type:ArrowParameterPlaceHolder,params:params_1}}this.context.isBindingElement=!1}}}return expr},Parser.prototype.parseArguments=function(){this.expect("(");var args=[];if(!this.match(")"))for(;;){var expr=this.match("...")?this.parseSpreadElement():this.isolateCoverGrammar(this.parseAssignmentExpression);if(args.push(expr),this.match(")"))break;this.expectCommaSeparator()}return this.expect(")"),args},Parser.prototype.isIdentifierName=function(token){return token.type===token_1.Token.Identifier||token.type===token_1.Token.Keyword||token.type===token_1.Token.BooleanLiteral||token.type===token_1.Token.NullLiteral},Parser.prototype.parseIdentifierName=function(){var node=this.createNode(),token=this.nextToken();return this.isIdentifierName(token)||this.throwUnexpectedToken(token),this.finalize(node,new Node.Identifier(token.value))},Parser.prototype.parseNewExpression=function(){var node=this.createNode(),id=this.parseIdentifierName();assert_1.assert("new"===id.name,"New expression must start with `new`");var expr;if(this.match("."))if(this.nextToken(),this.lookahead.type===token_1.Token.Identifier&&this.context.inFunctionBody&&"target"===this.lookahead.value){var property=this.parseIdentifierName();expr=new Node.MetaProperty(id,property)}else this.throwUnexpectedToken(this.lookahead);else{var callee=this.isolateCoverGrammar(this.parseLeftHandSideExpression),args=this.match("(")?this.parseArguments():[];expr=new Node.NewExpression(callee,args),this.context.isAssignmentTarget=!1,this.context.isBindingElement=!1}return this.finalize(node,expr)},Parser.prototype.parseLeftHandSideExpressionAllowCall=function(){var startToken=this.lookahead,previousAllowIn=this.context.allowIn;this.context.allowIn=!0;var expr;for(this.matchKeyword("super")&&this.context.inFunctionBody?(expr=this.createNode(),this.nextToken(),expr=this.finalize(expr,new Node.Super),this.match("(")||this.match(".")||this.match("[")||this.throwUnexpectedToken(this.lookahead)):expr=this.inheritCoverGrammar(this.matchKeyword("new")?this.parseNewExpression:this.parsePrimaryExpression);;)if(this.match(".")){this.context.isBindingElement=!1,this.context.isAssignmentTarget=!0,this.expect(".");var property=this.parseIdentifierName();expr=this.finalize(this.startNode(startToken),new Node.StaticMemberExpression(expr,property))}else if(this.match("(")){this.context.isBindingElement=!1,this.context.isAssignmentTarget=!1;var args=this.parseArguments();expr=this.finalize(this.startNode(startToken),new Node.CallExpression(expr,args))}else if(this.match("[")){this.context.isBindingElement=!1,this.context.isAssignmentTarget=!0,this.expect("[");var property=this.isolateCoverGrammar(this.parseExpression);this.expect("]"),expr=this.finalize(this.startNode(startToken),new Node.ComputedMemberExpression(expr,property))}else{if(this.lookahead.type!==token_1.Token.Template||!this.lookahead.head)break;var quasi=this.parseTemplateLiteral();expr=this.finalize(this.startNode(startToken),new Node.TaggedTemplateExpression(expr,quasi))}return this.context.allowIn=previousAllowIn,expr},Parser.prototype.parseSuper=function(){var node=this.createNode();return this.expectKeyword("super"),this.match("[")||this.match(".")||this.throwUnexpectedToken(this.lookahead),this.finalize(node,new Node.Super)},Parser.prototype.parseLeftHandSideExpression=function(){assert_1.assert(this.context.allowIn,"callee of new expression always allow in keyword.");for(var node=this.startNode(this.lookahead),expr=this.matchKeyword("super")&&this.context.inFunctionBody?this.parseSuper():this.inheritCoverGrammar(this.matchKeyword("new")?this.parseNewExpression:this.parsePrimaryExpression);;)if(this.match("[")){this.context.isBindingElement=!1,this.context.isAssignmentTarget=!0,this.expect("[");var property=this.isolateCoverGrammar(this.parseExpression);this.expect("]"),expr=this.finalize(node,new Node.ComputedMemberExpression(expr,property))}else if(this.match(".")){this.context.isBindingElement=!1,this.context.isAssignmentTarget=!0,this.expect(".");var property=this.parseIdentifierName();expr=this.finalize(node,new Node.StaticMemberExpression(expr,property))}else{if(this.lookahead.type!==token_1.Token.Template||!this.lookahead.head)break;var quasi=this.parseTemplateLiteral();expr=this.finalize(node,new Node.TaggedTemplateExpression(expr,quasi))}return expr},Parser.prototype.parseUpdateExpression=function(){var expr,startToken=this.lookahead;if(this.match("++")||this.match("--")){var node=this.startNode(startToken),token=this.nextToken();expr=this.inheritCoverGrammar(this.parseUnaryExpression),this.context.strict&&expr.type===syntax_1.Syntax.Identifier&&this.scanner.isRestrictedWord(expr.name)&&this.tolerateError(messages_1.Messages.StrictLHSPrefix),this.context.isAssignmentTarget||this.tolerateError(messages_1.Messages.InvalidLHSInAssignment);var prefix=!0;expr=this.finalize(node,new Node.UpdateExpression(token.value,expr,prefix)),this.context.isAssignmentTarget=!1,this.context.isBindingElement=!1}else if(expr=this.inheritCoverGrammar(this.parseLeftHandSideExpressionAllowCall),!this.hasLineTerminator&&this.lookahead.type===token_1.Token.Punctuator&&(this.match("++")||this.match("--"))){this.context.strict&&expr.type===syntax_1.Syntax.Identifier&&this.scanner.isRestrictedWord(expr.name)&&this.tolerateError(messages_1.Messages.StrictLHSPostfix),this.context.isAssignmentTarget||this.tolerateError(messages_1.Messages.InvalidLHSInAssignment),this.context.isAssignmentTarget=!1,this.context.isBindingElement=!1;var operator=this.nextToken().value,prefix=!1;expr=this.finalize(this.startNode(startToken),new Node.UpdateExpression(operator,expr,prefix))}return expr},Parser.prototype.parseUnaryExpression=function(){var expr;if(this.match("+")||this.match("-")||this.match("~")||this.match("!")||this.matchKeyword("delete")||this.matchKeyword("void")||this.matchKeyword("typeof")){var node=this.startNode(this.lookahead),token=this.nextToken();expr=this.inheritCoverGrammar(this.parseUnaryExpression),expr=this.finalize(node,new Node.UnaryExpression(token.value,expr)),this.context.strict&&"delete"===expr.operator&&expr.argument.type===syntax_1.Syntax.Identifier&&this.tolerateError(messages_1.Messages.StrictDelete),this.context.isAssignmentTarget=!1,this.context.isBindingElement=!1}else expr=this.parseUpdateExpression();return expr},Parser.prototype.parseExponentiationExpression=function(){var startToken=this.lookahead,expr=this.inheritCoverGrammar(this.parseUnaryExpression);if(expr.type!==syntax_1.Syntax.UnaryExpression&&this.match("**")){this.nextToken(),this.context.isAssignmentTarget=!1,this.context.isBindingElement=!1;var left=expr,right=this.isolateCoverGrammar(this.parseExponentiationExpression);expr=this.finalize(this.startNode(startToken),new Node.BinaryExpression("**",left,right))}return expr},Parser.prototype.binaryPrecedence=function(token){var precedence,op=token.value;return precedence=token.type===token_1.Token.Punctuator?this.operatorPrecedence[op]||0:token.type===token_1.Token.Keyword&&("instanceof"===op||this.context.allowIn&&"in"===op)?7:0},Parser.prototype.parseBinaryExpression=function(){var startToken=this.lookahead,expr=this.inheritCoverGrammar(this.parseExponentiationExpression),token=this.lookahead,prec=this.binaryPrecedence(token);if(prec>0){this.nextToken(),token.prec=prec,this.context.isAssignmentTarget=!1,this.context.isBindingElement=!1;for(var markers=[startToken,this.lookahead],left=expr,right=this.isolateCoverGrammar(this.parseExponentiationExpression),stack=[left,token,right];;){if(prec=this.binaryPrecedence(this.lookahead),prec<=0)break;for(;stack.length>2&&prec<=stack[stack.length-2].prec;){right=stack.pop();var operator=stack.pop().value;left=stack.pop(),markers.pop();var node=this.startNode(markers[markers.length-1]);stack.push(this.finalize(node,new Node.BinaryExpression(operator,left,right)))}token=this.nextToken(),token.prec=prec,stack.push(token),markers.push(this.lookahead),stack.push(this.isolateCoverGrammar(this.parseExponentiationExpression))}var i=stack.length-1;for(expr=stack[i],markers.pop();i>1;){var node=this.startNode(markers.pop());expr=this.finalize(node,new Node.BinaryExpression(stack[i-1].value,stack[i-2],expr)),i-=2}}return expr},Parser.prototype.parseConditionalExpression=function(){var startToken=this.lookahead,expr=this.inheritCoverGrammar(this.parseBinaryExpression);if(this.match("?")){this.nextToken();var previousAllowIn=this.context.allowIn;this.context.allowIn=!0;var consequent=this.isolateCoverGrammar(this.parseAssignmentExpression);this.context.allowIn=previousAllowIn,this.expect(":");var alternate=this.isolateCoverGrammar(this.parseAssignmentExpression);expr=this.finalize(this.startNode(startToken),new Node.ConditionalExpression(expr,consequent,alternate)),this.context.isAssignmentTarget=!1,this.context.isBindingElement=!1}return expr},Parser.prototype.checkPatternParam=function(options,param){switch(param.type){case syntax_1.Syntax.Identifier:this.validateParam(options,param,param.name);break;case syntax_1.Syntax.RestElement:this.checkPatternParam(options,param.argument);break;case syntax_1.Syntax.AssignmentPattern:this.checkPatternParam(options,param.left);break;case syntax_1.Syntax.ArrayPattern:for(var i=0;i<param.elements.length;i++)null!==param.elements[i]&&this.checkPatternParam(options,param.elements[i]);break;case syntax_1.Syntax.YieldExpression:break;default:assert_1.assert(param.type===syntax_1.Syntax.ObjectPattern,"Invalid type");for(var i=0;i<param.properties.length;i++)this.checkPatternParam(options,param.properties[i].value)}},Parser.prototype.reinterpretAsCoverFormalsList=function(expr){var options,params=[expr];switch(expr.type){case syntax_1.Syntax.Identifier:break;case ArrowParameterPlaceHolder:params=expr.params;break;default:return null}options={paramSet:{}};for(var i=0;i<params.length;++i){var param=params[i];param.type===syntax_1.Syntax.AssignmentPattern&&param.right.type===syntax_1.Syntax.YieldExpression&&(param.right.argument&&this.throwUnexpectedToken(this.lookahead),param.right.type=syntax_1.Syntax.Identifier,param.right.name="yield",delete param.right.argument,delete param.right.delegate),this.checkPatternParam(options,param),params[i]=param}if(this.context.strict||!this.context.allowYield)for(var i=0;i<params.length;++i){var param=params[i];param.type===syntax_1.Syntax.YieldExpression&&this.throwUnexpectedToken(this.lookahead)}if(options.message===messages_1.Messages.StrictParamDupe){var token=this.context.strict?options.stricted:options.firstRestricted;this.throwUnexpectedToken(token,options.message)}return{params:params,stricted:options.stricted,firstRestricted:options.firstRestricted,message:options.message}},Parser.prototype.parseAssignmentExpression=function(){var expr;if(!this.context.allowYield&&this.matchKeyword("yield"))expr=this.parseYieldExpression();else{var startToken=this.lookahead,token=startToken;if(expr=this.parseConditionalExpression(),expr.type===ArrowParameterPlaceHolder||this.match("=>")){this.context.isAssignmentTarget=!1,this.context.isBindingElement=!1;var list=this.reinterpretAsCoverFormalsList(expr);if(list){this.hasLineTerminator&&this.tolerateUnexpectedToken(this.lookahead),this.context.firstCoverInitializedNameError=null;var previousStrict=this.context.strict,previousAllowYield=this.context.allowYield;this.context.allowYield=!0;var node=this.startNode(startToken);this.expect("=>");var body=this.match("{")?this.parseFunctionSourceElements():this.isolateCoverGrammar(this.parseAssignmentExpression),expression=body.type!==syntax_1.Syntax.BlockStatement;this.context.strict&&list.firstRestricted&&this.throwUnexpectedToken(list.firstRestricted,list.message),this.context.strict&&list.stricted&&this.tolerateUnexpectedToken(list.stricted,list.message),expr=this.finalize(node,new Node.ArrowFunctionExpression(list.params,body,expression)),this.context.strict=previousStrict,this.context.allowYield=previousAllowYield}}else if(this.matchAssign()){if(this.context.isAssignmentTarget||this.tolerateError(messages_1.Messages.InvalidLHSInAssignment),this.context.strict&&expr.type===syntax_1.Syntax.Identifier){var id=expr;this.scanner.isRestrictedWord(id.name)&&this.tolerateUnexpectedToken(token,messages_1.Messages.StrictLHSAssignment),this.scanner.isStrictModeReservedWord(id.name)&&this.tolerateUnexpectedToken(token,messages_1.Messages.StrictReservedWord)}this.match("=")?this.reinterpretExpressionAsPattern(expr):(this.context.isAssignmentTarget=!1,this.context.isBindingElement=!1),token=this.nextToken();var right=this.isolateCoverGrammar(this.parseAssignmentExpression);expr=this.finalize(this.startNode(startToken),new Node.AssignmentExpression(token.value,expr,right)),this.context.firstCoverInitializedNameError=null}}return expr},Parser.prototype.parseExpression=function(){var startToken=this.lookahead,expr=this.isolateCoverGrammar(this.parseAssignmentExpression);if(this.match(",")){var expressions=[];for(expressions.push(expr);this.startMarker.index<this.scanner.length&&this.match(",");)this.nextToken(),expressions.push(this.isolateCoverGrammar(this.parseAssignmentExpression));expr=this.finalize(this.startNode(startToken),new Node.SequenceExpression(expressions))}return expr},Parser.prototype.parseStatementListItem=function(){var statement=null;if(this.context.isAssignmentTarget=!0,this.context.isBindingElement=!0,this.lookahead.type===token_1.Token.Keyword)switch(this.lookahead.value){case"export":"module"!==this.sourceType&&this.tolerateUnexpectedToken(this.lookahead,messages_1.Messages.IllegalExportDeclaration),statement=this.parseExportDeclaration();break;case"import":"module"!==this.sourceType&&this.tolerateUnexpectedToken(this.lookahead,messages_1.Messages.IllegalImportDeclaration),statement=this.parseImportDeclaration();break;case"const":statement=this.parseLexicalDeclaration({inFor:!1});break;case"function":statement=this.parseFunctionDeclaration();break;case"class":statement=this.parseClassDeclaration();break;case"let":statement=this.isLexicalDeclaration()?this.parseLexicalDeclaration({inFor:!1}):this.parseStatement();break;default:statement=this.parseStatement()}else statement=this.parseStatement();return statement},Parser.prototype.parseBlock=function(){var node=this.createNode();this.expect("{");for(var block=[];;){if(this.match("}"))break;block.push(this.parseStatementListItem())}return this.expect("}"),this.finalize(node,new Node.BlockStatement(block))},Parser.prototype.parseLexicalBinding=function(kind,options){var node=this.createNode(),params=[],id=this.parsePattern(params,kind);this.context.strict&&id.type===syntax_1.Syntax.Identifier&&this.scanner.isRestrictedWord(id.name)&&this.tolerateError(messages_1.Messages.StrictVarName);var init=null;return"const"===kind?this.matchKeyword("in")||this.matchContextualKeyword("of")||(this.expect("="),init=this.isolateCoverGrammar(this.parseAssignmentExpression)):(!options.inFor&&id.type!==syntax_1.Syntax.Identifier||this.match("="))&&(this.expect("="),init=this.isolateCoverGrammar(this.parseAssignmentExpression)),this.finalize(node,new Node.VariableDeclarator(id,init))},Parser.prototype.parseBindingList=function(kind,options){for(var list=[this.parseLexicalBinding(kind,options)];this.match(",");)this.nextToken(),list.push(this.parseLexicalBinding(kind,options));return list},Parser.prototype.isLexicalDeclaration=function(){var previousIndex=this.scanner.index,previousLineNumber=this.scanner.lineNumber,previousLineStart=this.scanner.lineStart;this.collectComments();var next=this.scanner.lex();return this.scanner.index=previousIndex,this.scanner.lineNumber=previousLineNumber,this.scanner.lineStart=previousLineStart,next.type===token_1.Token.Identifier||next.type===token_1.Token.Punctuator&&"["===next.value||next.type===token_1.Token.Punctuator&&"{"===next.value||next.type===token_1.Token.Keyword&&"let"===next.value||next.type===token_1.Token.Keyword&&"yield"===next.value},Parser.prototype.parseLexicalDeclaration=function(options){var node=this.createNode(),kind=this.nextToken().value;assert_1.assert("let"===kind||"const"===kind,"Lexical declaration must be either let or const");var declarations=this.parseBindingList(kind,options);return this.consumeSemicolon(),this.finalize(node,new Node.VariableDeclaration(declarations,kind))},Parser.prototype.parseBindingRestElement=function(params,kind){var node=this.createNode();this.expect("...");var arg=this.parsePattern(params,kind);return this.finalize(node,new Node.RestElement(arg))},Parser.prototype.parseArrayPattern=function(params,kind){var node=this.createNode();this.expect("[");for(var elements=[];!this.match("]");)if(this.match(","))this.nextToken(),elements.push(null);else{if(this.match("...")){elements.push(this.parseBindingRestElement(params,kind));break}elements.push(this.parsePatternWithDefault(params,kind)),this.match("]")||this.expect(",")}return this.expect("]"),this.finalize(node,new Node.ArrayPattern(elements))},Parser.prototype.parsePropertyPattern=function(params,kind){var key,value,node=this.createNode(),computed=!1,shorthand=!1,method=!1;if(this.lookahead.type===token_1.Token.Identifier){var keyToken=this.lookahead;key=this.parseVariableIdentifier();var init=this.finalize(node,new Node.Identifier(keyToken.value));if(this.match("=")){params.push(keyToken),shorthand=!0,this.nextToken();var expr=this.parseAssignmentExpression();value=this.finalize(this.startNode(keyToken),new Node.AssignmentPattern(init,expr))}else this.match(":")?(this.expect(":"),value=this.parsePatternWithDefault(params,kind)):(params.push(keyToken),shorthand=!0,value=init)}else computed=this.match("["),key=this.parseObjectPropertyKey(),this.expect(":"),value=this.parsePatternWithDefault(params,kind);return this.finalize(node,new Node.Property("init",key,computed,value,method,shorthand))},Parser.prototype.parseObjectPattern=function(params,kind){var node=this.createNode(),properties=[];for(this.expect("{");!this.match("}");)properties.push(this.parsePropertyPattern(params,kind)),this.match("}")||this.expect(",");return this.expect("}"),this.finalize(node,new Node.ObjectPattern(properties))},Parser.prototype.parsePattern=function(params,kind){var pattern;return this.match("[")?pattern=this.parseArrayPattern(params,kind):this.match("{")?pattern=this.parseObjectPattern(params,kind):(!this.matchKeyword("let")||"const"!==kind&&"let"!==kind||this.tolerateUnexpectedToken(this.lookahead,messages_1.Messages.UnexpectedToken),params.push(this.lookahead),pattern=this.parseVariableIdentifier(kind)),pattern},Parser.prototype.parsePatternWithDefault=function(params,kind){var startToken=this.lookahead,pattern=this.parsePattern(params,kind);if(this.match("=")){this.nextToken();var previousAllowYield=this.context.allowYield;this.context.allowYield=!0;var right=this.isolateCoverGrammar(this.parseAssignmentExpression);this.context.allowYield=previousAllowYield,pattern=this.finalize(this.startNode(startToken),new Node.AssignmentPattern(pattern,right))}return pattern},Parser.prototype.parseVariableIdentifier=function(kind){var node=this.createNode(),token=this.nextToken();return token.type===token_1.Token.Keyword&&"yield"===token.value?(this.context.strict&&this.tolerateUnexpectedToken(token,messages_1.Messages.StrictReservedWord),this.context.allowYield||this.throwUnexpectedToken(token)):token.type!==token_1.Token.Identifier?this.context.strict&&token.type===token_1.Token.Keyword&&this.scanner.isStrictModeReservedWord(token.value)?this.tolerateUnexpectedToken(token,messages_1.Messages.StrictReservedWord):(this.context.strict||"let"!==token.value||"var"!==kind)&&this.throwUnexpectedToken(token):"module"===this.sourceType&&token.type===token_1.Token.Identifier&&"await"===token.value&&this.tolerateUnexpectedToken(token),this.finalize(node,new Node.Identifier(token.value))},Parser.prototype.parseVariableDeclaration=function(options){var node=this.createNode(),params=[],id=this.parsePattern(params,"var");this.context.strict&&id.type===syntax_1.Syntax.Identifier&&this.scanner.isRestrictedWord(id.name)&&this.tolerateError(messages_1.Messages.StrictVarName);var init=null;return this.match("=")?(this.nextToken(),init=this.isolateCoverGrammar(this.parseAssignmentExpression)):id.type===syntax_1.Syntax.Identifier||options.inFor||this.expect("="),this.finalize(node,new Node.VariableDeclarator(id,init))},Parser.prototype.parseVariableDeclarationList=function(options){var opt={inFor:options.inFor},list=[];for(list.push(this.parseVariableDeclaration(opt));this.match(",");)this.nextToken(),list.push(this.parseVariableDeclaration(opt));return list},Parser.prototype.parseVariableStatement=function(){var node=this.createNode();this.expectKeyword("var");var declarations=this.parseVariableDeclarationList({inFor:!1});return this.consumeSemicolon(),this.finalize(node,new Node.VariableDeclaration(declarations,"var"))},Parser.prototype.parseEmptyStatement=function(){var node=this.createNode();return this.expect(";"),this.finalize(node,new Node.EmptyStatement)},Parser.prototype.parseExpressionStatement=function(){var node=this.createNode(),expr=this.parseExpression();return this.consumeSemicolon(),this.finalize(node,new Node.ExpressionStatement(expr))},Parser.prototype.parseIfStatement=function(){var consequent,node=this.createNode(),alternate=null;this.expectKeyword("if"),this.expect("(");var test=this.parseExpression();return!this.match(")")&&this.config.tolerant?(this.tolerateUnexpectedToken(this.nextToken()),consequent=this.finalize(this.createNode(),new Node.EmptyStatement)):(this.expect(")"),consequent=this.parseStatement(),this.matchKeyword("else")&&(this.nextToken(),alternate=this.parseStatement())),this.finalize(node,new Node.IfStatement(test,consequent,alternate))},Parser.prototype.parseDoWhileStatement=function(){var node=this.createNode();this.expectKeyword("do");var previousInIteration=this.context.inIteration;this.context.inIteration=!0;var body=this.parseStatement();this.context.inIteration=previousInIteration,this.expectKeyword("while"),this.expect("(");var test=this.parseExpression();return this.expect(")"),this.match(";")&&this.nextToken(),this.finalize(node,new Node.DoWhileStatement(body,test))},Parser.prototype.parseWhileStatement=function(){var body,node=this.createNode();this.expectKeyword("while"),this.expect("(");var test=this.parseExpression();if(!this.match(")")&&this.config.tolerant)this.tolerateUnexpectedToken(this.nextToken()),body=this.finalize(this.createNode(),new Node.EmptyStatement);else{this.expect(")");var previousInIteration=this.context.inIteration;this.context.inIteration=!0,body=this.parseStatement(),this.context.inIteration=previousInIteration}return this.finalize(node,new Node.WhileStatement(test,body))},Parser.prototype.parseForStatement=function(){var left,right,init=null,test=null,update=null,forIn=!0,node=this.createNode();if(this.expectKeyword("for"),this.expect("("),this.match(";"))this.nextToken();else if(this.matchKeyword("var")){init=this.createNode(),this.nextToken();var previousAllowIn=this.context.allowIn;this.context.allowIn=!1;var declarations=this.parseVariableDeclarationList({inFor:!0});if(this.context.allowIn=previousAllowIn,1===declarations.length&&this.matchKeyword("in")){var decl=declarations[0];decl.init&&(decl.id.type===syntax_1.Syntax.ArrayPattern||decl.id.type===syntax_1.Syntax.ObjectPattern||this.context.strict)&&this.tolerateError(messages_1.Messages.ForInOfLoopInitializer,"for-in"),init=this.finalize(init,new Node.VariableDeclaration(declarations,"var")),this.nextToken(),left=init,right=this.parseExpression(),init=null}else 1===declarations.length&&null===declarations[0].init&&this.matchContextualKeyword("of")?(init=this.finalize(init,new Node.VariableDeclaration(declarations,"var")),this.nextToken(),left=init,right=this.parseAssignmentExpression(),init=null,forIn=!1):(init=this.finalize(init,new Node.VariableDeclaration(declarations,"var")),this.expect(";"))}else if(this.matchKeyword("const")||this.matchKeyword("let")){init=this.createNode();var kind=this.nextToken().value;if(this.context.strict||"in"!==this.lookahead.value){var previousAllowIn=this.context.allowIn;this.context.allowIn=!1;var declarations=this.parseBindingList(kind,{inFor:!0});this.context.allowIn=previousAllowIn,1===declarations.length&&null===declarations[0].init&&this.matchKeyword("in")?(init=this.finalize(init,new Node.VariableDeclaration(declarations,kind)),this.nextToken(),left=init,right=this.parseExpression(),init=null):1===declarations.length&&null===declarations[0].init&&this.matchContextualKeyword("of")?(init=this.finalize(init,new Node.VariableDeclaration(declarations,kind)),this.nextToken(),left=init,right=this.parseAssignmentExpression(),init=null,forIn=!1):(this.consumeSemicolon(),init=this.finalize(init,new Node.VariableDeclaration(declarations,kind)))}else init=this.finalize(init,new Node.Identifier(kind)),this.nextToken(),left=init,right=this.parseExpression(),init=null}else{var initStartToken=this.lookahead,previousAllowIn=this.context.allowIn;if(this.context.allowIn=!1,init=this.inheritCoverGrammar(this.parseAssignmentExpression),this.context.allowIn=previousAllowIn,
this.matchKeyword("in"))this.context.isAssignmentTarget&&init.type!==syntax_1.Syntax.AssignmentExpression||this.tolerateError(messages_1.Messages.InvalidLHSInForIn),this.nextToken(),this.reinterpretExpressionAsPattern(init),left=init,right=this.parseExpression(),init=null;else if(this.matchContextualKeyword("of"))this.context.isAssignmentTarget&&init.type!==syntax_1.Syntax.AssignmentExpression||this.tolerateError(messages_1.Messages.InvalidLHSInForLoop),this.nextToken(),this.reinterpretExpressionAsPattern(init),left=init,right=this.parseAssignmentExpression(),init=null,forIn=!1;else{if(this.match(",")){for(var initSeq=[init];this.match(",");)this.nextToken(),initSeq.push(this.isolateCoverGrammar(this.parseAssignmentExpression));init=this.finalize(this.startNode(initStartToken),new Node.SequenceExpression(initSeq))}this.expect(";")}}"undefined"==typeof left&&(this.match(";")||(test=this.parseExpression()),this.expect(";"),this.match(")")||(update=this.parseExpression()));var body;if(!this.match(")")&&this.config.tolerant)this.tolerateUnexpectedToken(this.nextToken()),body=this.finalize(this.createNode(),new Node.EmptyStatement);else{this.expect(")");var previousInIteration=this.context.inIteration;this.context.inIteration=!0,body=this.isolateCoverGrammar(this.parseStatement),this.context.inIteration=previousInIteration}return"undefined"==typeof left?this.finalize(node,new Node.ForStatement(init,test,update,body)):forIn?this.finalize(node,new Node.ForInStatement(left,right,body)):this.finalize(node,new Node.ForOfStatement(left,right,body))},Parser.prototype.parseContinueStatement=function(){var node=this.createNode();this.expectKeyword("continue");var label=null;if(this.lookahead.type===token_1.Token.Identifier&&!this.hasLineTerminator){label=this.parseVariableIdentifier();var key="$"+label.name;Object.prototype.hasOwnProperty.call(this.context.labelSet,key)||this.throwError(messages_1.Messages.UnknownLabel,label.name)}return this.consumeSemicolon(),null!==label||this.context.inIteration||this.throwError(messages_1.Messages.IllegalContinue),this.finalize(node,new Node.ContinueStatement(label))},Parser.prototype.parseBreakStatement=function(){var node=this.createNode();this.expectKeyword("break");var label=null;if(this.lookahead.type===token_1.Token.Identifier&&!this.hasLineTerminator){label=this.parseVariableIdentifier();var key="$"+label.name;Object.prototype.hasOwnProperty.call(this.context.labelSet,key)||this.throwError(messages_1.Messages.UnknownLabel,label.name)}return this.consumeSemicolon(),null!==label||this.context.inIteration||this.context.inSwitch||this.throwError(messages_1.Messages.IllegalBreak),this.finalize(node,new Node.BreakStatement(label))},Parser.prototype.parseReturnStatement=function(){this.context.inFunctionBody||this.tolerateError(messages_1.Messages.IllegalReturn);var node=this.createNode();this.expectKeyword("return");var hasArgument=!this.match(";")&&!this.match("}")&&!this.hasLineTerminator&&this.lookahead.type!==token_1.Token.EOF,argument=hasArgument?this.parseExpression():null;return this.consumeSemicolon(),this.finalize(node,new Node.ReturnStatement(argument))},Parser.prototype.parseWithStatement=function(){this.context.strict&&this.tolerateError(messages_1.Messages.StrictModeWith);var node=this.createNode();this.expectKeyword("with"),this.expect("(");var object=this.parseExpression();this.expect(")");var body=this.parseStatement();return this.finalize(node,new Node.WithStatement(object,body))},Parser.prototype.parseSwitchCase=function(){var test,node=this.createNode();this.matchKeyword("default")?(this.nextToken(),test=null):(this.expectKeyword("case"),test=this.parseExpression()),this.expect(":");for(var consequent=[];;){if(this.match("}")||this.matchKeyword("default")||this.matchKeyword("case"))break;consequent.push(this.parseStatementListItem())}return this.finalize(node,new Node.SwitchCase(test,consequent))},Parser.prototype.parseSwitchStatement=function(){var node=this.createNode();this.expectKeyword("switch"),this.expect("(");var discriminant=this.parseExpression();this.expect(")");var previousInSwitch=this.context.inSwitch;this.context.inSwitch=!0;var cases=[],defaultFound=!1;for(this.expect("{");;){if(this.match("}"))break;var clause=this.parseSwitchCase();null===clause.test&&(defaultFound&&this.throwError(messages_1.Messages.MultipleDefaultsInSwitch),defaultFound=!0),cases.push(clause)}return this.expect("}"),this.context.inSwitch=previousInSwitch,this.finalize(node,new Node.SwitchStatement(discriminant,cases))},Parser.prototype.parseLabelledStatement=function(){var statement,node=this.createNode(),expr=this.parseExpression();if(expr.type===syntax_1.Syntax.Identifier&&this.match(":")){this.nextToken();var id=expr,key="$"+id.name;Object.prototype.hasOwnProperty.call(this.context.labelSet,key)&&this.throwError(messages_1.Messages.Redeclaration,"Label",id.name),this.context.labelSet[key]=!0;var labeledBody=this.parseStatement();delete this.context.labelSet[key],statement=new Node.LabeledStatement(id,labeledBody)}else this.consumeSemicolon(),statement=new Node.ExpressionStatement(expr);return this.finalize(node,statement)},Parser.prototype.parseThrowStatement=function(){var node=this.createNode();this.expectKeyword("throw"),this.hasLineTerminator&&this.throwError(messages_1.Messages.NewlineAfterThrow);var argument=this.parseExpression();return this.consumeSemicolon(),this.finalize(node,new Node.ThrowStatement(argument))},Parser.prototype.parseCatchClause=function(){var node=this.createNode();this.expectKeyword("catch"),this.expect("("),this.match(")")&&this.throwUnexpectedToken(this.lookahead);for(var params=[],param=this.parsePattern(params),paramMap={},i=0;i<params.length;i++){var key="$"+params[i].value;Object.prototype.hasOwnProperty.call(paramMap,key)&&this.tolerateError(messages_1.Messages.DuplicateBinding,params[i].value),paramMap[key]=!0}this.context.strict&&param.type===syntax_1.Syntax.Identifier&&this.scanner.isRestrictedWord(param.name)&&this.tolerateError(messages_1.Messages.StrictCatchVariable),this.expect(")");var body=this.parseBlock();return this.finalize(node,new Node.CatchClause(param,body))},Parser.prototype.parseFinallyClause=function(){return this.expectKeyword("finally"),this.parseBlock()},Parser.prototype.parseTryStatement=function(){var node=this.createNode();this.expectKeyword("try");var block=this.parseBlock(),handler=this.matchKeyword("catch")?this.parseCatchClause():null,finalizer=this.matchKeyword("finally")?this.parseFinallyClause():null;return handler||finalizer||this.throwError(messages_1.Messages.NoCatchOrFinally),this.finalize(node,new Node.TryStatement(block,handler,finalizer))},Parser.prototype.parseDebuggerStatement=function(){var node=this.createNode();return this.expectKeyword("debugger"),this.consumeSemicolon(),this.finalize(node,new Node.DebuggerStatement)},Parser.prototype.parseStatement=function(){var statement=null;switch(this.lookahead.type){case token_1.Token.BooleanLiteral:case token_1.Token.NullLiteral:case token_1.Token.NumericLiteral:case token_1.Token.StringLiteral:case token_1.Token.Template:case token_1.Token.RegularExpression:statement=this.parseExpressionStatement();break;case token_1.Token.Punctuator:var value=this.lookahead.value;statement="{"===value?this.parseBlock():"("===value?this.parseExpressionStatement():";"===value?this.parseEmptyStatement():this.parseExpressionStatement();break;case token_1.Token.Identifier:statement=this.parseLabelledStatement();break;case token_1.Token.Keyword:switch(this.lookahead.value){case"break":statement=this.parseBreakStatement();break;case"continue":statement=this.parseContinueStatement();break;case"debugger":statement=this.parseDebuggerStatement();break;case"do":statement=this.parseDoWhileStatement();break;case"for":statement=this.parseForStatement();break;case"function":statement=this.parseFunctionDeclaration();break;case"if":statement=this.parseIfStatement();break;case"return":statement=this.parseReturnStatement();break;case"switch":statement=this.parseSwitchStatement();break;case"throw":statement=this.parseThrowStatement();break;case"try":statement=this.parseTryStatement();break;case"var":statement=this.parseVariableStatement();break;case"while":statement=this.parseWhileStatement();break;case"with":statement=this.parseWithStatement();break;default:statement=this.parseExpressionStatement()}break;default:this.throwUnexpectedToken(this.lookahead)}return statement},Parser.prototype.parseFunctionSourceElements=function(){var node=this.createNode();this.expect("{");var body=this.parseDirectivePrologues(),previousLabelSet=this.context.labelSet,previousInIteration=this.context.inIteration,previousInSwitch=this.context.inSwitch,previousInFunctionBody=this.context.inFunctionBody;for(this.context.labelSet={},this.context.inIteration=!1,this.context.inSwitch=!1,this.context.inFunctionBody=!0;this.startMarker.index<this.scanner.length&&!this.match("}");)body.push(this.parseStatementListItem());return this.expect("}"),this.context.labelSet=previousLabelSet,this.context.inIteration=previousInIteration,this.context.inSwitch=previousInSwitch,this.context.inFunctionBody=previousInFunctionBody,this.finalize(node,new Node.BlockStatement(body))},Parser.prototype.validateParam=function(options,param,name){var key="$"+name;this.context.strict?(this.scanner.isRestrictedWord(name)&&(options.stricted=param,options.message=messages_1.Messages.StrictParamName),Object.prototype.hasOwnProperty.call(options.paramSet,key)&&(options.stricted=param,options.message=messages_1.Messages.StrictParamDupe)):options.firstRestricted||(this.scanner.isRestrictedWord(name)?(options.firstRestricted=param,options.message=messages_1.Messages.StrictParamName):this.scanner.isStrictModeReservedWord(name)?(options.firstRestricted=param,options.message=messages_1.Messages.StrictReservedWord):Object.prototype.hasOwnProperty.call(options.paramSet,key)&&(options.stricted=param,options.message=messages_1.Messages.StrictParamDupe)),"function"==typeof Object.defineProperty?Object.defineProperty(options.paramSet,key,{value:!0,enumerable:!0,writable:!0,configurable:!0}):options.paramSet[key]=!0},Parser.prototype.parseRestElement=function(params){var node=this.createNode();this.expect("...");var arg=this.parsePattern(params);return this.match("=")&&this.throwError(messages_1.Messages.DefaultRestParameter),this.match(")")||this.throwError(messages_1.Messages.ParameterAfterRestParameter),this.finalize(node,new Node.RestElement(arg))},Parser.prototype.parseFormalParameter=function(options){for(var params=[],param=this.match("...")?this.parseRestElement(params):this.parsePatternWithDefault(params),i=0;i<params.length;i++)this.validateParam(options,params[i],params[i].value);return options.params.push(param),!this.match(")")},Parser.prototype.parseFormalParameters=function(firstRestricted){var options;if(options={params:[],firstRestricted:firstRestricted},this.expect("("),!this.match(")"))for(options.paramSet={};this.startMarker.index<this.scanner.length&&this.parseFormalParameter(options);)this.expect(",");return this.expect(")"),{params:options.params,stricted:options.stricted,firstRestricted:options.firstRestricted,message:options.message}},Parser.prototype.parseFunctionDeclaration=function(identifierIsOptional){var node=this.createNode();this.expectKeyword("function");var isGenerator=this.match("*");isGenerator&&this.nextToken();var message,id=null,firstRestricted=null;if(!identifierIsOptional||!this.match("(")){var token=this.lookahead;id=this.parseVariableIdentifier(),this.context.strict?this.scanner.isRestrictedWord(token.value)&&this.tolerateUnexpectedToken(token,messages_1.Messages.StrictFunctionName):this.scanner.isRestrictedWord(token.value)?(firstRestricted=token,message=messages_1.Messages.StrictFunctionName):this.scanner.isStrictModeReservedWord(token.value)&&(firstRestricted=token,message=messages_1.Messages.StrictReservedWord)}var previousAllowYield=this.context.allowYield;this.context.allowYield=!isGenerator;var formalParameters=this.parseFormalParameters(firstRestricted),params=formalParameters.params,stricted=formalParameters.stricted;firstRestricted=formalParameters.firstRestricted,formalParameters.message&&(message=formalParameters.message);var previousStrict=this.context.strict,body=this.parseFunctionSourceElements();return this.context.strict&&firstRestricted&&this.throwUnexpectedToken(firstRestricted,message),this.context.strict&&stricted&&this.tolerateUnexpectedToken(stricted,message),this.context.strict=previousStrict,this.context.allowYield=previousAllowYield,this.finalize(node,new Node.FunctionDeclaration(id,params,body,isGenerator))},Parser.prototype.parseFunctionExpression=function(){var node=this.createNode();this.expectKeyword("function");var isGenerator=this.match("*");isGenerator&&this.nextToken();var message,firstRestricted,id=null,previousAllowYield=this.context.allowYield;if(this.context.allowYield=!isGenerator,!this.match("(")){var token=this.lookahead;id=this.context.strict||isGenerator||!this.matchKeyword("yield")?this.parseVariableIdentifier():this.parseIdentifierName(),this.context.strict?this.scanner.isRestrictedWord(token.value)&&this.tolerateUnexpectedToken(token,messages_1.Messages.StrictFunctionName):this.scanner.isRestrictedWord(token.value)?(firstRestricted=token,message=messages_1.Messages.StrictFunctionName):this.scanner.isStrictModeReservedWord(token.value)&&(firstRestricted=token,message=messages_1.Messages.StrictReservedWord)}var formalParameters=this.parseFormalParameters(firstRestricted),params=formalParameters.params,stricted=formalParameters.stricted;firstRestricted=formalParameters.firstRestricted,formalParameters.message&&(message=formalParameters.message);var previousStrict=this.context.strict,body=this.parseFunctionSourceElements();return this.context.strict&&firstRestricted&&this.throwUnexpectedToken(firstRestricted,message),this.context.strict&&stricted&&this.tolerateUnexpectedToken(stricted,message),this.context.strict=previousStrict,this.context.allowYield=previousAllowYield,this.finalize(node,new Node.FunctionExpression(id,params,body,isGenerator))},Parser.prototype.parseDirective=function(){var token=this.lookahead,directive=null,node=this.createNode(),expr=this.parseExpression();return expr.type===syntax_1.Syntax.Literal&&(directive=this.getTokenRaw(token).slice(1,-1)),this.consumeSemicolon(),this.finalize(node,directive?new Node.Directive(expr,directive):new Node.ExpressionStatement(expr))},Parser.prototype.parseDirectivePrologues=function(){for(var firstRestricted=null,body=[];;){var token=this.lookahead;if(token.type!==token_1.Token.StringLiteral)break;var statement=this.parseDirective();body.push(statement);var directive=statement.directive;if("string"!=typeof directive)break;"use strict"===directive?(this.context.strict=!0,firstRestricted&&this.tolerateUnexpectedToken(firstRestricted,messages_1.Messages.StrictOctalLiteral)):!firstRestricted&&token.octal&&(firstRestricted=token)}return body},Parser.prototype.qualifiedPropertyName=function(token){switch(token.type){case token_1.Token.Identifier:case token_1.Token.StringLiteral:case token_1.Token.BooleanLiteral:case token_1.Token.NullLiteral:case token_1.Token.NumericLiteral:case token_1.Token.Keyword:return!0;case token_1.Token.Punctuator:return"["===token.value}return!1},Parser.prototype.parseGetterMethod=function(){var node=this.createNode();this.expect("("),this.expect(")");var isGenerator=!1,params={params:[],stricted:null,firstRestricted:null,message:null},previousAllowYield=this.context.allowYield;this.context.allowYield=!1;var method=this.parsePropertyMethod(params);return this.context.allowYield=previousAllowYield,this.finalize(node,new Node.FunctionExpression(null,params.params,method,isGenerator))},Parser.prototype.parseSetterMethod=function(){var node=this.createNode(),options={params:[],firstRestricted:null,paramSet:{}},isGenerator=!1,previousAllowYield=this.context.allowYield;this.context.allowYield=!1,this.expect("("),this.match(")")?this.tolerateUnexpectedToken(this.lookahead):this.parseFormalParameter(options),this.expect(")");var method=this.parsePropertyMethod(options);return this.context.allowYield=previousAllowYield,this.finalize(node,new Node.FunctionExpression(null,options.params,method,isGenerator))},Parser.prototype.parseGeneratorMethod=function(){var node=this.createNode(),isGenerator=!0,previousAllowYield=this.context.allowYield;this.context.allowYield=!0;var params=this.parseFormalParameters();this.context.allowYield=!1;var method=this.parsePropertyMethod(params);return this.context.allowYield=previousAllowYield,this.finalize(node,new Node.FunctionExpression(null,params.params,method,isGenerator))},Parser.prototype.isStartOfExpression=function(){var start=!0,value=this.lookahead.value;switch(this.lookahead.type){case token_1.Token.Punctuator:start="["===value||"("===value||"{"===value||"+"===value||"-"===value||"!"===value||"~"===value||"++"===value||"--"===value||"/"===value||"/="===value;break;case token_1.Token.Keyword:start="class"===value||"delete"===value||"function"===value||"let"===value||"new"===value||"super"===value||"this"===value||"typeof"===value||"void"===value||"yield"===value}return start},Parser.prototype.parseYieldExpression=function(){var node=this.createNode();this.expectKeyword("yield");var argument=null,delegate=!1;if(!this.hasLineTerminator){var previousAllowYield=this.context.allowYield;this.context.allowYield=!1,delegate=this.match("*"),delegate?(this.nextToken(),argument=this.parseAssignmentExpression()):this.isStartOfExpression()&&(argument=this.parseAssignmentExpression()),this.context.allowYield=previousAllowYield}return this.finalize(node,new Node.YieldExpression(argument,delegate))},Parser.prototype.parseClassElement=function(hasConstructor){var kind,key,value,token=this.lookahead,node=this.createNode(),computed=!1,method=!1,isStatic=!1;if(this.match("*"))this.nextToken();else{computed=this.match("["),key=this.parseObjectPropertyKey();var id=key;"static"===id.name&&(this.qualifiedPropertyName(this.lookahead)||this.match("*"))&&(token=this.lookahead,isStatic=!0,computed=this.match("["),this.match("*")?this.nextToken():key=this.parseObjectPropertyKey())}var lookaheadPropertyKey=this.qualifiedPropertyName(this.lookahead);return token.type===token_1.Token.Identifier?"get"===token.value&&lookaheadPropertyKey?(kind="get",computed=this.match("["),key=this.parseObjectPropertyKey(),this.context.allowYield=!1,value=this.parseGetterMethod()):"set"===token.value&&lookaheadPropertyKey&&(kind="set",computed=this.match("["),key=this.parseObjectPropertyKey(),value=this.parseSetterMethod()):token.type===token_1.Token.Punctuator&&"*"===token.value&&lookaheadPropertyKey&&(kind="init",computed=this.match("["),key=this.parseObjectPropertyKey(),value=this.parseGeneratorMethod(),method=!0),!kind&&key&&this.match("(")&&(kind="init",value=this.parsePropertyMethodFunction(),method=!0),kind||this.throwUnexpectedToken(this.lookahead),"init"===kind&&(kind="method"),computed||(isStatic&&this.isPropertyKey(key,"prototype")&&this.throwUnexpectedToken(token,messages_1.Messages.StaticPrototype),!isStatic&&this.isPropertyKey(key,"constructor")&&("method"===kind&&method&&!value.generator||this.throwUnexpectedToken(token,messages_1.Messages.ConstructorSpecialMethod),hasConstructor.value?this.throwUnexpectedToken(token,messages_1.Messages.DuplicateConstructor):hasConstructor.value=!0,kind="constructor")),this.finalize(node,new Node.MethodDefinition(key,computed,value,kind,isStatic))},Parser.prototype.parseClassElementList=function(){var body=[],hasConstructor={value:!1};for(this.expect("{");!this.match("}");)this.match(";")?this.nextToken():body.push(this.parseClassElement(hasConstructor));return this.expect("}"),body},Parser.prototype.parseClassBody=function(){var node=this.createNode(),elementList=this.parseClassElementList();return this.finalize(node,new Node.ClassBody(elementList))},Parser.prototype.parseClassDeclaration=function(identifierIsOptional){var node=this.createNode(),previousStrict=this.context.strict;this.context.strict=!0,this.expectKeyword("class");var id=identifierIsOptional&&this.lookahead.type!==token_1.Token.Identifier?null:this.parseVariableIdentifier(),superClass=null;this.matchKeyword("extends")&&(this.nextToken(),superClass=this.isolateCoverGrammar(this.parseLeftHandSideExpressionAllowCall));var classBody=this.parseClassBody();return this.context.strict=previousStrict,this.finalize(node,new Node.ClassDeclaration(id,superClass,classBody))},Parser.prototype.parseClassExpression=function(){var node=this.createNode(),previousStrict=this.context.strict;this.context.strict=!0,this.expectKeyword("class");var id=this.lookahead.type===token_1.Token.Identifier?this.parseVariableIdentifier():null,superClass=null;this.matchKeyword("extends")&&(this.nextToken(),superClass=this.isolateCoverGrammar(this.parseLeftHandSideExpressionAllowCall));var classBody=this.parseClassBody();return this.context.strict=previousStrict,this.finalize(node,new Node.ClassExpression(id,superClass,classBody))},Parser.prototype.parseProgram=function(){for(var node=this.createNode(),body=this.parseDirectivePrologues();this.startMarker.index<this.scanner.length;)body.push(this.parseStatementListItem());return this.finalize(node,new Node.Program(body,this.sourceType))},Parser.prototype.parseModuleSpecifier=function(){var node=this.createNode();this.lookahead.type!==token_1.Token.StringLiteral&&this.throwError(messages_1.Messages.InvalidModuleSpecifier);var token=this.nextToken(),raw=this.getTokenRaw(token);return this.finalize(node,new Node.Literal(token.value,raw))},Parser.prototype.parseImportSpecifier=function(){var imported,local,node=this.createNode();return this.lookahead.type===token_1.Token.Identifier?(imported=this.parseVariableIdentifier(),local=imported,this.matchContextualKeyword("as")&&(this.nextToken(),local=this.parseVariableIdentifier())):(imported=this.parseIdentifierName(),local=imported,this.matchContextualKeyword("as")?(this.nextToken(),local=this.parseVariableIdentifier()):this.throwUnexpectedToken(this.nextToken())),this.finalize(node,new Node.ImportSpecifier(local,imported))},Parser.prototype.parseNamedImports=function(){this.expect("{");for(var specifiers=[];!this.match("}");)specifiers.push(this.parseImportSpecifier()),this.match("}")||this.expect(",");return this.expect("}"),specifiers},Parser.prototype.parseImportDefaultSpecifier=function(){var node=this.createNode(),local=this.parseIdentifierName();return this.finalize(node,new Node.ImportDefaultSpecifier(local))},Parser.prototype.parseImportNamespaceSpecifier=function(){var node=this.createNode();this.expect("*"),this.matchContextualKeyword("as")||this.throwError(messages_1.Messages.NoAsAfterImportNamespace),this.nextToken();var local=this.parseIdentifierName();return this.finalize(node,new Node.ImportNamespaceSpecifier(local))},Parser.prototype.parseImportDeclaration=function(){this.context.inFunctionBody&&this.throwError(messages_1.Messages.IllegalImportDeclaration);var node=this.createNode();this.expectKeyword("import");var src,specifiers=[];if(this.lookahead.type===token_1.Token.StringLiteral)src=this.parseModuleSpecifier();else{if(this.match("{")?specifiers=specifiers.concat(this.parseNamedImports()):this.match("*")?specifiers.push(this.parseImportNamespaceSpecifier()):this.isIdentifierName(this.lookahead)&&!this.matchKeyword("default")?(specifiers.push(this.parseImportDefaultSpecifier()),this.match(",")&&(this.nextToken(),this.match("*")?specifiers.push(this.parseImportNamespaceSpecifier()):this.match("{")?specifiers=specifiers.concat(this.parseNamedImports()):this.throwUnexpectedToken(this.lookahead))):this.throwUnexpectedToken(this.nextToken()),!this.matchContextualKeyword("from")){var message=this.lookahead.value?messages_1.Messages.UnexpectedToken:messages_1.Messages.MissingFromClause;this.throwError(message,this.lookahead.value)}this.nextToken(),src=this.parseModuleSpecifier()}return this.consumeSemicolon(),this.finalize(node,new Node.ImportDeclaration(specifiers,src))},Parser.prototype.parseExportSpecifier=function(){var node=this.createNode(),local=this.parseIdentifierName(),exported=local;return this.matchContextualKeyword("as")&&(this.nextToken(),exported=this.parseIdentifierName()),this.finalize(node,new Node.ExportSpecifier(local,exported))},Parser.prototype.parseExportDeclaration=function(){this.context.inFunctionBody&&this.throwError(messages_1.Messages.IllegalExportDeclaration);var node=this.createNode();this.expectKeyword("export");var exportDeclaration;if(this.matchKeyword("default"))if(this.nextToken(),this.matchKeyword("function")){var declaration=this.parseFunctionDeclaration(!0);exportDeclaration=this.finalize(node,new Node.ExportDefaultDeclaration(declaration))}else if(this.matchKeyword("class")){var declaration=this.parseClassDeclaration(!0);exportDeclaration=this.finalize(node,new Node.ExportDefaultDeclaration(declaration))}else{this.matchContextualKeyword("from")&&this.throwError(messages_1.Messages.UnexpectedToken,this.lookahead.value);var declaration=this.match("{")?this.parseObjectInitializer():this.match("[")?this.parseArrayInitializer():this.parseAssignmentExpression();this.consumeSemicolon(),exportDeclaration=this.finalize(node,new Node.ExportDefaultDeclaration(declaration))}else if(this.match("*")){if(this.nextToken(),!this.matchContextualKeyword("from")){var message=this.lookahead.value?messages_1.Messages.UnexpectedToken:messages_1.Messages.MissingFromClause;this.throwError(message,this.lookahead.value)}this.nextToken();var src=this.parseModuleSpecifier();this.consumeSemicolon(),exportDeclaration=this.finalize(node,new Node.ExportAllDeclaration(src))}else if(this.lookahead.type===token_1.Token.Keyword){var declaration=void 0;switch(this.lookahead.value){case"let":case"const":declaration=this.parseLexicalDeclaration({inFor:!1});break;case"var":case"class":case"function":declaration=this.parseStatementListItem();break;default:this.throwUnexpectedToken(this.lookahead)}exportDeclaration=this.finalize(node,new Node.ExportNamedDeclaration(declaration,[],null))}else{var specifiers=[],source=null,isExportFromIdentifier=!1;for(this.expect("{");!this.match("}");)isExportFromIdentifier=isExportFromIdentifier||this.matchKeyword("default"),specifiers.push(this.parseExportSpecifier()),this.match("}")||this.expect(",");if(this.expect("}"),this.matchContextualKeyword("from"))this.nextToken(),source=this.parseModuleSpecifier(),this.consumeSemicolon();else if(isExportFromIdentifier){var message=this.lookahead.value?messages_1.Messages.UnexpectedToken:messages_1.Messages.MissingFromClause;this.throwError(message,this.lookahead.value)}else this.consumeSemicolon();exportDeclaration=this.finalize(node,new Node.ExportNamedDeclaration(null,specifiers,source))}return exportDeclaration},Parser}();exports.Parser=Parser},function(module,exports){"use strict";function assert(condition,message){if(!condition)throw new Error("ASSERT: "+message)}exports.assert=assert},function(module,exports){"use strict";exports.Messages={UnexpectedToken:"Unexpected token %0",UnexpectedTokenIllegal:"Unexpected token ILLEGAL",UnexpectedNumber:"Unexpected number",UnexpectedString:"Unexpected string",UnexpectedIdentifier:"Unexpected identifier",UnexpectedReserved:"Unexpected reserved word",UnexpectedTemplate:"Unexpected quasi %0",UnexpectedEOS:"Unexpected end of input",NewlineAfterThrow:"Illegal newline after throw",InvalidRegExp:"Invalid regular expression",UnterminatedRegExp:"Invalid regular expression: missing /",InvalidLHSInAssignment:"Invalid left-hand side in assignment",InvalidLHSInForIn:"Invalid left-hand side in for-in",InvalidLHSInForLoop:"Invalid left-hand side in for-loop",MultipleDefaultsInSwitch:"More than one default clause in switch statement",NoCatchOrFinally:"Missing catch or finally after try",UnknownLabel:"Undefined label '%0'",Redeclaration:"%0 '%1' has already been declared",IllegalContinue:"Illegal continue statement",IllegalBreak:"Illegal break statement",IllegalReturn:"Illegal return statement",StrictModeWith:"Strict mode code may not include a with statement",StrictCatchVariable:"Catch variable may not be eval or arguments in strict mode",StrictVarName:"Variable name may not be eval or arguments in strict mode",StrictParamName:"Parameter name eval or arguments is not allowed in strict mode",StrictParamDupe:"Strict mode function may not have duplicate parameter names",StrictFunctionName:"Function name may not be eval or arguments in strict mode",StrictOctalLiteral:"Octal literals are not allowed in strict mode.",StrictDelete:"Delete of an unqualified identifier in strict mode.",StrictLHSAssignment:"Assignment to eval or arguments is not allowed in strict mode",StrictLHSPostfix:"Postfix increment/decrement may not have eval or arguments operand in strict mode",StrictLHSPrefix:"Prefix increment/decrement may not have eval or arguments operand in strict mode",StrictReservedWord:"Use of future reserved word in strict mode",TemplateOctalLiteral:"Octal literals are not allowed in template strings.",ParameterAfterRestParameter:"Rest parameter must be last formal parameter",DefaultRestParameter:"Unexpected token =",DuplicateProtoProperty:"Duplicate __proto__ fields are not allowed in object literals",ConstructorSpecialMethod:"Class constructor may not be an accessor",DuplicateConstructor:"A class may only have one constructor",StaticPrototype:"Classes may not have static property named prototype",MissingFromClause:"Unexpected token",NoAsAfterImportNamespace:"Unexpected token",InvalidModuleSpecifier:"Unexpected token",IllegalImportDeclaration:"Unexpected token",IllegalExportDeclaration:"Unexpected token",DuplicateBinding:"Duplicate binding %0",ForInOfLoopInitializer:"%0 loop variable declaration may not have an initializer"}},function(module,exports){"use strict";var ErrorHandler=function(){function ErrorHandler(){this.errors=[],this.tolerant=!1}return ErrorHandler.prototype.recordError=function(error){this.errors.push(error)},ErrorHandler.prototype.tolerate=function(error){if(!this.tolerant)throw error;this.recordError(error)},ErrorHandler.prototype.constructError=function(msg,column){var error=new Error(msg);try{throw error}catch(base){Object.create&&Object.defineProperty&&(error=Object.create(base),Object.defineProperty(error,"column",{value:column}))}finally{return error}},ErrorHandler.prototype.createError=function(index,line,col,description){var msg="Line "+line+": "+description,error=this.constructError(msg,col);return error.index=index,error.lineNumber=line,error.description=description,error},ErrorHandler.prototype.throwError=function(index,line,col,description){throw this.createError(index,line,col,description)},ErrorHandler.prototype.tolerateError=function(index,line,col,description){var error=this.createError(index,line,col,description);if(!this.tolerant)throw error;this.recordError(error)},ErrorHandler}();exports.ErrorHandler=ErrorHandler},function(module,exports){"use strict";!function(Token){Token[Token.BooleanLiteral=1]="BooleanLiteral",Token[Token.EOF=2]="EOF",Token[Token.Identifier=3]="Identifier",Token[Token.Keyword=4]="Keyword",Token[Token.NullLiteral=5]="NullLiteral",Token[Token.NumericLiteral=6]="NumericLiteral",Token[Token.Punctuator=7]="Punctuator",Token[Token.StringLiteral=8]="StringLiteral",Token[Token.RegularExpression=9]="RegularExpression",Token[Token.Template=10]="Template"}(exports.Token||(exports.Token={}));var Token=exports.Token;exports.TokenName={},exports.TokenName[Token.BooleanLiteral]="Boolean",exports.TokenName[Token.EOF]="<end>",exports.TokenName[Token.Identifier]="Identifier",exports.TokenName[Token.Keyword]="Keyword",exports.TokenName[Token.NullLiteral]="Null",exports.TokenName[Token.NumericLiteral]="Numeric",exports.TokenName[Token.Punctuator]="Punctuator",exports.TokenName[Token.StringLiteral]="String",exports.TokenName[Token.RegularExpression]="RegularExpression",
exports.TokenName[Token.Template]="Template"},function(module,exports,__webpack_require__){"use strict";function hexValue(ch){return"0123456789abcdef".indexOf(ch.toLowerCase())}function octalValue(ch){return"01234567".indexOf(ch)}var assert_1=__webpack_require__(4),messages_1=__webpack_require__(5),character_1=__webpack_require__(9),token_1=__webpack_require__(7),Scanner=function(){function Scanner(code,handler){this.source=code,this.errorHandler=handler,this.trackComment=!1,this.length=code.length,this.index=0,this.lineNumber=code.length>0?1:0,this.lineStart=0,this.curlyStack=[]}return Scanner.prototype.eof=function(){return this.index>=this.length},Scanner.prototype.throwUnexpectedToken=function(message){void 0===message&&(message=messages_1.Messages.UnexpectedTokenIllegal),this.errorHandler.throwError(this.index,this.lineNumber,this.index-this.lineStart+1,message)},Scanner.prototype.tolerateUnexpectedToken=function(){this.errorHandler.tolerateError(this.index,this.lineNumber,this.index-this.lineStart+1,messages_1.Messages.UnexpectedTokenIllegal)},Scanner.prototype.skipSingleLineComment=function(offset){var comments,start,loc;for(this.trackComment&&(comments=[],start=this.index-offset,loc={start:{line:this.lineNumber,column:this.index-this.lineStart-offset},end:{}});!this.eof();){var ch=this.source.charCodeAt(this.index);if(++this.index,character_1.Character.isLineTerminator(ch)){if(this.trackComment){loc.end={line:this.lineNumber,column:this.index-this.lineStart-1};var entry={multiLine:!1,slice:[start+offset,this.index-1],range:[start,this.index-1],loc:loc};comments.push(entry)}return 13===ch&&10===this.source.charCodeAt(this.index)&&++this.index,++this.lineNumber,this.lineStart=this.index,comments}}if(this.trackComment){loc.end={line:this.lineNumber,column:this.index-this.lineStart};var entry={multiLine:!1,slice:[start+offset,this.index],range:[start,this.index],loc:loc};comments.push(entry)}return comments},Scanner.prototype.skipMultiLineComment=function(){var comments,start,loc;for(this.trackComment&&(comments=[],start=this.index-2,loc={start:{line:this.lineNumber,column:this.index-this.lineStart-2},end:{}});!this.eof();){var ch=this.source.charCodeAt(this.index);if(character_1.Character.isLineTerminator(ch))13===ch&&10===this.source.charCodeAt(this.index+1)&&++this.index,++this.lineNumber,++this.index,this.lineStart=this.index;else if(42===ch){if(47===this.source.charCodeAt(this.index+1)){if(this.index+=2,this.trackComment){loc.end={line:this.lineNumber,column:this.index-this.lineStart};var entry={multiLine:!0,slice:[start+2,this.index-2],range:[start,this.index],loc:loc};comments.push(entry)}return comments}++this.index}else++this.index}if(this.trackComment){loc.end={line:this.lineNumber,column:this.index-this.lineStart};var entry={multiLine:!0,slice:[start+2,this.index],range:[start,this.index],loc:loc};comments.push(entry)}return this.tolerateUnexpectedToken(),comments},Scanner.prototype.scanComments=function(){var comments;this.trackComment&&(comments=[]);for(var start=0===this.index;!this.eof();){var ch=this.source.charCodeAt(this.index);if(character_1.Character.isWhiteSpace(ch))++this.index;else if(character_1.Character.isLineTerminator(ch))++this.index,13===ch&&10===this.source.charCodeAt(this.index)&&++this.index,++this.lineNumber,this.lineStart=this.index,start=!0;else if(47===ch)if(ch=this.source.charCodeAt(this.index+1),47===ch){this.index+=2;var comment=this.skipSingleLineComment(2);this.trackComment&&(comments=comments.concat(comment)),start=!0}else{if(42!==ch)break;this.index+=2;var comment=this.skipMultiLineComment();this.trackComment&&(comments=comments.concat(comment))}else if(start&&45===ch){if(45!==this.source.charCodeAt(this.index+1)||62!==this.source.charCodeAt(this.index+2))break;this.index+=3;var comment=this.skipSingleLineComment(3);this.trackComment&&(comments=comments.concat(comment))}else{if(60!==ch)break;if("!--"!==this.source.slice(this.index+1,this.index+4))break;this.index+=4;var comment=this.skipSingleLineComment(4);this.trackComment&&(comments=comments.concat(comment))}}return comments},Scanner.prototype.isFutureReservedWord=function(id){switch(id){case"enum":case"export":case"import":case"super":return!0;default:return!1}},Scanner.prototype.isStrictModeReservedWord=function(id){switch(id){case"implements":case"interface":case"package":case"private":case"protected":case"public":case"static":case"yield":case"let":return!0;default:return!1}},Scanner.prototype.isRestrictedWord=function(id){return"eval"===id||"arguments"===id},Scanner.prototype.isKeyword=function(id){switch(id.length){case 2:return"if"===id||"in"===id||"do"===id;case 3:return"var"===id||"for"===id||"new"===id||"try"===id||"let"===id;case 4:return"this"===id||"else"===id||"case"===id||"void"===id||"with"===id||"enum"===id;case 5:return"while"===id||"break"===id||"catch"===id||"throw"===id||"const"===id||"yield"===id||"class"===id||"super"===id;case 6:return"return"===id||"typeof"===id||"delete"===id||"switch"===id||"export"===id||"import"===id;case 7:return"default"===id||"finally"===id||"extends"===id;case 8:return"function"===id||"continue"===id||"debugger"===id;case 10:return"instanceof"===id;default:return!1}},Scanner.prototype.codePointAt=function(i){var cp=this.source.charCodeAt(i);if(cp>=55296&&cp<=56319){var second=this.source.charCodeAt(i+1);if(second>=56320&&second<=57343){var first=cp;cp=1024*(first-55296)+second-56320+65536}}return cp},Scanner.prototype.scanHexEscape=function(prefix){for(var len="u"===prefix?4:2,code=0,i=0;i<len;++i){if(this.eof()||!character_1.Character.isHexDigit(this.source.charCodeAt(this.index)))return"";code=16*code+hexValue(this.source[this.index++])}return String.fromCharCode(code)},Scanner.prototype.scanUnicodeCodePointEscape=function(){var ch=this.source[this.index],code=0;for("}"===ch&&this.throwUnexpectedToken();!this.eof()&&(ch=this.source[this.index++],character_1.Character.isHexDigit(ch.charCodeAt(0)));)code=16*code+hexValue(ch);return(code>1114111||"}"!==ch)&&this.throwUnexpectedToken(),character_1.Character.fromCodePoint(code)},Scanner.prototype.getIdentifier=function(){for(var start=this.index++;!this.eof();){var ch=this.source.charCodeAt(this.index);if(92===ch)return this.index=start,this.getComplexIdentifier();if(ch>=55296&&ch<57343)return this.index=start,this.getComplexIdentifier();if(!character_1.Character.isIdentifierPart(ch))break;++this.index}return this.source.slice(start,this.index)},Scanner.prototype.getComplexIdentifier=function(){var cp=this.codePointAt(this.index),id=character_1.Character.fromCodePoint(cp);this.index+=id.length;var ch;for(92===cp&&(117!==this.source.charCodeAt(this.index)&&this.throwUnexpectedToken(),++this.index,"{"===this.source[this.index]?(++this.index,ch=this.scanUnicodeCodePointEscape()):(ch=this.scanHexEscape("u"),cp=ch.charCodeAt(0),ch&&"\\"!==ch&&character_1.Character.isIdentifierStart(cp)||this.throwUnexpectedToken()),id=ch);!this.eof()&&(cp=this.codePointAt(this.index),character_1.Character.isIdentifierPart(cp));)ch=character_1.Character.fromCodePoint(cp),id+=ch,this.index+=ch.length,92===cp&&(id=id.substr(0,id.length-1),117!==this.source.charCodeAt(this.index)&&this.throwUnexpectedToken(),++this.index,"{"===this.source[this.index]?(++this.index,ch=this.scanUnicodeCodePointEscape()):(ch=this.scanHexEscape("u"),cp=ch.charCodeAt(0),ch&&"\\"!==ch&&character_1.Character.isIdentifierPart(cp)||this.throwUnexpectedToken()),id+=ch);return id},Scanner.prototype.octalToDecimal=function(ch){var octal="0"!==ch,code=octalValue(ch);return!this.eof()&&character_1.Character.isOctalDigit(this.source.charCodeAt(this.index))&&(octal=!0,code=8*code+octalValue(this.source[this.index++]),"0123".indexOf(ch)>=0&&!this.eof()&&character_1.Character.isOctalDigit(this.source.charCodeAt(this.index))&&(code=8*code+octalValue(this.source[this.index++]))),{code:code,octal:octal}},Scanner.prototype.scanIdentifier=function(){var type,start=this.index,id=92===this.source.charCodeAt(start)?this.getComplexIdentifier():this.getIdentifier();return type=1===id.length?token_1.Token.Identifier:this.isKeyword(id)?token_1.Token.Keyword:"null"===id?token_1.Token.NullLiteral:"true"===id||"false"===id?token_1.Token.BooleanLiteral:token_1.Token.Identifier,{type:type,value:id,lineNumber:this.lineNumber,lineStart:this.lineStart,start:start,end:this.index}},Scanner.prototype.scanPunctuator=function(){var token={type:token_1.Token.Punctuator,value:"",lineNumber:this.lineNumber,lineStart:this.lineStart,start:this.index,end:this.index},str=this.source[this.index];switch(str){case"(":case"{":"{"===str&&this.curlyStack.push("{"),++this.index;break;case".":++this.index,"."===this.source[this.index]&&"."===this.source[this.index+1]&&(this.index+=2,str="...");break;case"}":++this.index,this.curlyStack.pop();break;case")":case";":case",":case"[":case"]":case":":case"?":case"~":++this.index;break;default:str=this.source.substr(this.index,4),">>>="===str?this.index+=4:(str=str.substr(0,3),"==="===str||"!=="===str||">>>"===str||"<<="===str||">>="===str||"**="===str?this.index+=3:(str=str.substr(0,2),"&&"===str||"||"===str||"=="===str||"!="===str||"+="===str||"-="===str||"*="===str||"/="===str||"++"===str||"--"===str||"<<"===str||">>"===str||"&="===str||"|="===str||"^="===str||"%="===str||"<="===str||">="===str||"=>"===str||"**"===str?this.index+=2:(str=this.source[this.index],"<>=!+-*%&|^/".indexOf(str)>=0&&++this.index)))}return this.index===token.start&&this.throwUnexpectedToken(),token.end=this.index,token.value=str,token},Scanner.prototype.scanHexLiteral=function(start){for(var number="";!this.eof()&&character_1.Character.isHexDigit(this.source.charCodeAt(this.index));)number+=this.source[this.index++];return 0===number.length&&this.throwUnexpectedToken(),character_1.Character.isIdentifierStart(this.source.charCodeAt(this.index))&&this.throwUnexpectedToken(),{type:token_1.Token.NumericLiteral,value:parseInt("0x"+number,16),lineNumber:this.lineNumber,lineStart:this.lineStart,start:start,end:this.index}},Scanner.prototype.scanBinaryLiteral=function(start){for(var ch,number="";!this.eof()&&(ch=this.source[this.index],"0"===ch||"1"===ch);)number+=this.source[this.index++];return 0===number.length&&this.throwUnexpectedToken(),this.eof()||(ch=this.source.charCodeAt(this.index),(character_1.Character.isIdentifierStart(ch)||character_1.Character.isDecimalDigit(ch))&&this.throwUnexpectedToken()),{type:token_1.Token.NumericLiteral,value:parseInt(number,2),lineNumber:this.lineNumber,lineStart:this.lineStart,start:start,end:this.index}},Scanner.prototype.scanOctalLiteral=function(prefix,start){var number="",octal=!1;for(character_1.Character.isOctalDigit(prefix.charCodeAt(0))?(octal=!0,number="0"+this.source[this.index++]):++this.index;!this.eof()&&character_1.Character.isOctalDigit(this.source.charCodeAt(this.index));)number+=this.source[this.index++];return octal||0!==number.length||this.throwUnexpectedToken(),(character_1.Character.isIdentifierStart(this.source.charCodeAt(this.index))||character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index)))&&this.throwUnexpectedToken(),{type:token_1.Token.NumericLiteral,value:parseInt(number,8),octal:octal,lineNumber:this.lineNumber,lineStart:this.lineStart,start:start,end:this.index}},Scanner.prototype.isImplicitOctalLiteral=function(){for(var i=this.index+1;i<this.length;++i){var ch=this.source[i];if("8"===ch||"9"===ch)return!1;if(!character_1.Character.isOctalDigit(ch.charCodeAt(0)))return!0}return!0},Scanner.prototype.scanNumericLiteral=function(){var start=this.index,ch=this.source[start];assert_1.assert(character_1.Character.isDecimalDigit(ch.charCodeAt(0))||"."===ch,"Numeric literal must start with a decimal digit or a decimal point");var number="";if("."!==ch){if(number=this.source[this.index++],ch=this.source[this.index],"0"===number){if("x"===ch||"X"===ch)return++this.index,this.scanHexLiteral(start);if("b"===ch||"B"===ch)return++this.index,this.scanBinaryLiteral(start);if("o"===ch||"O"===ch)return this.scanOctalLiteral(ch,start);if(ch&&character_1.Character.isOctalDigit(ch.charCodeAt(0))&&this.isImplicitOctalLiteral())return this.scanOctalLiteral(ch,start)}for(;character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index));)number+=this.source[this.index++];ch=this.source[this.index]}if("."===ch){for(number+=this.source[this.index++];character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index));)number+=this.source[this.index++];ch=this.source[this.index]}if("e"===ch||"E"===ch)if(number+=this.source[this.index++],ch=this.source[this.index],"+"!==ch&&"-"!==ch||(number+=this.source[this.index++]),character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index)))for(;character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index));)number+=this.source[this.index++];else this.throwUnexpectedToken();return character_1.Character.isIdentifierStart(this.source.charCodeAt(this.index))&&this.throwUnexpectedToken(),{type:token_1.Token.NumericLiteral,value:parseFloat(number),lineNumber:this.lineNumber,lineStart:this.lineStart,start:start,end:this.index}},Scanner.prototype.scanStringLiteral=function(){var start=this.index,quote=this.source[start];assert_1.assert("'"===quote||'"'===quote,"String literal must starts with a quote"),++this.index;for(var octal=!1,str="";!this.eof();){var ch=this.source[this.index++];if(ch===quote){quote="";break}if("\\"===ch)if(ch=this.source[this.index++],ch&&character_1.Character.isLineTerminator(ch.charCodeAt(0)))++this.lineNumber,"\r"===ch&&"\n"===this.source[this.index]&&++this.index,this.lineStart=this.index;else switch(ch){case"u":case"x":if("{"===this.source[this.index])++this.index,str+=this.scanUnicodeCodePointEscape();else{var unescaped=this.scanHexEscape(ch);unescaped||this.throwUnexpectedToken(),str+=unescaped}break;case"n":str+="\n";break;case"r":str+="\r";break;case"t":str+="\t";break;case"b":str+="\b";break;case"f":str+="\f";break;case"v":str+="\v";break;case"8":case"9":str+=ch,this.tolerateUnexpectedToken();break;default:if(ch&&character_1.Character.isOctalDigit(ch.charCodeAt(0))){var octToDec=this.octalToDecimal(ch);octal=octToDec.octal||octal,str+=String.fromCharCode(octToDec.code)}else str+=ch}else{if(character_1.Character.isLineTerminator(ch.charCodeAt(0)))break;str+=ch}}return""!==quote&&(this.index=start,this.throwUnexpectedToken()),{type:token_1.Token.StringLiteral,value:str,octal:octal,lineNumber:this.lineNumber,lineStart:this.lineStart,start:start,end:this.index}},Scanner.prototype.scanTemplate=function(){var cooked="",terminated=!1,start=this.index,head="`"===this.source[start],tail=!1,rawOffset=2;for(++this.index;!this.eof();){var ch=this.source[this.index++];if("`"===ch){rawOffset=1,tail=!0,terminated=!0;break}if("$"===ch){if("{"===this.source[this.index]){this.curlyStack.push("${"),++this.index,terminated=!0;break}cooked+=ch}else if("\\"===ch)if(ch=this.source[this.index++],character_1.Character.isLineTerminator(ch.charCodeAt(0)))++this.lineNumber,"\r"===ch&&"\n"===this.source[this.index]&&++this.index,this.lineStart=this.index;else switch(ch){case"n":cooked+="\n";break;case"r":cooked+="\r";break;case"t":cooked+="\t";break;case"u":case"x":if("{"===this.source[this.index])++this.index,cooked+=this.scanUnicodeCodePointEscape();else{var restore=this.index,unescaped=this.scanHexEscape(ch);unescaped?cooked+=unescaped:(this.index=restore,cooked+=ch)}break;case"b":cooked+="\b";break;case"f":cooked+="\f";break;case"v":cooked+="\v";break;default:"0"===ch?(character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))&&this.throwUnexpectedToken(messages_1.Messages.TemplateOctalLiteral),cooked+="\0"):character_1.Character.isOctalDigit(ch.charCodeAt(0))?this.throwUnexpectedToken(messages_1.Messages.TemplateOctalLiteral):cooked+=ch}else character_1.Character.isLineTerminator(ch.charCodeAt(0))?(++this.lineNumber,"\r"===ch&&"\n"===this.source[this.index]&&++this.index,this.lineStart=this.index,cooked+="\n"):cooked+=ch}return terminated||this.throwUnexpectedToken(),head||this.curlyStack.pop(),{type:token_1.Token.Template,value:{cooked:cooked,raw:this.source.slice(start+1,this.index-rawOffset)},head:head,tail:tail,lineNumber:this.lineNumber,lineStart:this.lineStart,start:start,end:this.index}},Scanner.prototype.testRegExp=function(pattern,flags){var astralSubstitute="￿",tmp=pattern,self=this;flags.indexOf("u")>=0&&(tmp=tmp.replace(/\\u\{([0-9a-fA-F]+)\}|\\u([a-fA-F0-9]{4})/g,function($0,$1,$2){var codePoint=parseInt($1||$2,16);return codePoint>1114111&&self.throwUnexpectedToken(messages_1.Messages.InvalidRegExp),codePoint<=65535?String.fromCharCode(codePoint):astralSubstitute}).replace(/[\uD800-\uDBFF][\uDC00-\uDFFF]/g,astralSubstitute));try{RegExp(tmp)}catch(e){this.throwUnexpectedToken(messages_1.Messages.InvalidRegExp)}try{return new RegExp(pattern,flags)}catch(exception){return null}},Scanner.prototype.scanRegExpBody=function(){var ch=this.source[this.index];assert_1.assert("/"===ch,"Regular expression literal must start with a slash");for(var str=this.source[this.index++],classMarker=!1,terminated=!1;!this.eof();)if(ch=this.source[this.index++],str+=ch,"\\"===ch)ch=this.source[this.index++],character_1.Character.isLineTerminator(ch.charCodeAt(0))&&this.throwUnexpectedToken(messages_1.Messages.UnterminatedRegExp),str+=ch;else if(character_1.Character.isLineTerminator(ch.charCodeAt(0)))this.throwUnexpectedToken(messages_1.Messages.UnterminatedRegExp);else if(classMarker)"]"===ch&&(classMarker=!1);else{if("/"===ch){terminated=!0;break}"["===ch&&(classMarker=!0)}terminated||this.throwUnexpectedToken(messages_1.Messages.UnterminatedRegExp);var body=str.substr(1,str.length-2);return{value:body,literal:str}},Scanner.prototype.scanRegExpFlags=function(){for(var str="",flags="";!this.eof();){var ch=this.source[this.index];if(!character_1.Character.isIdentifierPart(ch.charCodeAt(0)))break;if(++this.index,"\\"!==ch||this.eof())flags+=ch,str+=ch;else if(ch=this.source[this.index],"u"===ch){++this.index;var restore=this.index;if(ch=this.scanHexEscape("u"))for(flags+=ch,str+="\\u";restore<this.index;++restore)str+=this.source[restore];else this.index=restore,flags+="u",str+="\\u";this.tolerateUnexpectedToken()}else str+="\\",this.tolerateUnexpectedToken()}return{value:flags,literal:str}},Scanner.prototype.scanRegExp=function(){var start=this.index,body=this.scanRegExpBody(),flags=this.scanRegExpFlags(),value=this.testRegExp(body.value,flags.value);return{type:token_1.Token.RegularExpression,value:value,literal:body.literal+flags.literal,regex:{pattern:body.value,flags:flags.value},lineNumber:this.lineNumber,lineStart:this.lineStart,start:start,end:this.index}},Scanner.prototype.lex=function(){if(this.eof())return{type:token_1.Token.EOF,lineNumber:this.lineNumber,lineStart:this.lineStart,start:this.index,end:this.index};var cp=this.source.charCodeAt(this.index);return character_1.Character.isIdentifierStart(cp)?this.scanIdentifier():40===cp||41===cp||59===cp?this.scanPunctuator():39===cp||34===cp?this.scanStringLiteral():46===cp?character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index+1))?this.scanNumericLiteral():this.scanPunctuator():character_1.Character.isDecimalDigit(cp)?this.scanNumericLiteral():96===cp||125===cp&&"${"===this.curlyStack[this.curlyStack.length-1]?this.scanTemplate():cp>=55296&&cp<57343&&character_1.Character.isIdentifierStart(this.codePointAt(this.index))?this.scanIdentifier():this.scanPunctuator()},Scanner}();exports.Scanner=Scanner},function(module,exports){"use strict";var Regex={NonAsciiIdentifierStart:/[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B4\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AD\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDF00-\uDF19]|\uD806[\uDCA0-\uDCDF\uDCFF\uDEC0-\uDEF8]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50\uDF93-\uDF9F]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD83A[\uDC00-\uDCC4]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1]|\uD87E[\uDC00-\uDE1D]/,NonAsciiIdentifierPart:/[\xAA\xB5\xB7\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u08A0-\u08B4\u08E3-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0AF9\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58-\u0C5A\u0C60-\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D01-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D57\u0D5F-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1369-\u1371\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19DA\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1CD0-\u1CD2\u1CD4-\u1CF6\u1CF8\u1CF9\u1D00-\u1DF5\u1DFC-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200C\u200D\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AD\uA7B0-\uA7B7\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C4\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA8FD\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDDFD\uDE80-\uDE9C\uDEA0-\uDED0\uDEE0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF7A\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCA0-\uDCA9\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00-\uDE03\uDE05\uDE06\uDE0C-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE38-\uDE3A\uDE3F\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE6\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC00-\uDC46\uDC66-\uDC6F\uDC7F-\uDCBA\uDCD0-\uDCE8\uDCF0-\uDCF9\uDD00-\uDD34\uDD36-\uDD3F\uDD50-\uDD73\uDD76\uDD80-\uDDC4\uDDCA-\uDDCC\uDDD0-\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE37\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEEA\uDEF0-\uDEF9\uDF00-\uDF03\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3C-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF50\uDF57\uDF5D-\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC80-\uDCC5\uDCC7\uDCD0-\uDCD9\uDD80-\uDDB5\uDDB8-\uDDC0\uDDD8-\uDDDD\uDE00-\uDE40\uDE44\uDE50-\uDE59\uDE80-\uDEB7\uDEC0-\uDEC9\uDF00-\uDF19\uDF1D-\uDF2B\uDF30-\uDF39]|\uD806[\uDCA0-\uDCE9\uDCFF\uDEC0-\uDEF8]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE60-\uDE69\uDED0-\uDEED\uDEF0-\uDEF4\uDF00-\uDF36\uDF40-\uDF43\uDF50-\uDF59\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50-\uDF7E\uDF8F-\uDF9F]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB\uDFCE-\uDFFF]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD83A[\uDC00-\uDCC4\uDCD0-\uDCD6]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1]|\uD87E[\uDC00-\uDE1D]|\uDB40[\uDD00-\uDDEF]/
};exports.Character={fromCodePoint:function(cp){return cp<65536?String.fromCharCode(cp):String.fromCharCode(55296+(cp-65536>>10))+String.fromCharCode(56320+(cp-65536&1023))},isWhiteSpace:function(cp){return 32===cp||9===cp||11===cp||12===cp||160===cp||cp>=5760&&[5760,8192,8193,8194,8195,8196,8197,8198,8199,8200,8201,8202,8239,8287,12288,65279].indexOf(cp)>=0},isLineTerminator:function(cp){return 10===cp||13===cp||8232===cp||8233===cp},isIdentifierStart:function(cp){return 36===cp||95===cp||cp>=65&&cp<=90||cp>=97&&cp<=122||92===cp||cp>=128&&Regex.NonAsciiIdentifierStart.test(exports.Character.fromCodePoint(cp))},isIdentifierPart:function(cp){return 36===cp||95===cp||cp>=65&&cp<=90||cp>=97&&cp<=122||cp>=48&&cp<=57||92===cp||cp>=128&&Regex.NonAsciiIdentifierPart.test(exports.Character.fromCodePoint(cp))},isDecimalDigit:function(cp){return cp>=48&&cp<=57},isHexDigit:function(cp){return cp>=48&&cp<=57||cp>=65&&cp<=70||cp>=97&&cp<=102},isOctalDigit:function(cp){return cp>=48&&cp<=55}}},function(module,exports,__webpack_require__){"use strict";var syntax_1=__webpack_require__(2),ArrayExpression=function(){function ArrayExpression(elements){this.type=syntax_1.Syntax.ArrayExpression,this.elements=elements}return ArrayExpression}();exports.ArrayExpression=ArrayExpression;var ArrayPattern=function(){function ArrayPattern(elements){this.type=syntax_1.Syntax.ArrayPattern,this.elements=elements}return ArrayPattern}();exports.ArrayPattern=ArrayPattern;var ArrowFunctionExpression=function(){function ArrowFunctionExpression(params,body,expression){this.type=syntax_1.Syntax.ArrowFunctionExpression,this.id=null,this.params=params,this.body=body,this.generator=!1,this.expression=expression}return ArrowFunctionExpression}();exports.ArrowFunctionExpression=ArrowFunctionExpression;var AssignmentExpression=function(){function AssignmentExpression(operator,left,right){this.type=syntax_1.Syntax.AssignmentExpression,this.operator=operator,this.left=left,this.right=right}return AssignmentExpression}();exports.AssignmentExpression=AssignmentExpression;var AssignmentPattern=function(){function AssignmentPattern(left,right){this.type=syntax_1.Syntax.AssignmentPattern,this.left=left,this.right=right}return AssignmentPattern}();exports.AssignmentPattern=AssignmentPattern;var BinaryExpression=function(){function BinaryExpression(operator,left,right){var logical="||"===operator||"&&"===operator;this.type=logical?syntax_1.Syntax.LogicalExpression:syntax_1.Syntax.BinaryExpression,this.operator=operator,this.left=left,this.right=right}return BinaryExpression}();exports.BinaryExpression=BinaryExpression;var BlockStatement=function(){function BlockStatement(body){this.type=syntax_1.Syntax.BlockStatement,this.body=body}return BlockStatement}();exports.BlockStatement=BlockStatement;var BreakStatement=function(){function BreakStatement(label){this.type=syntax_1.Syntax.BreakStatement,this.label=label}return BreakStatement}();exports.BreakStatement=BreakStatement;var CallExpression=function(){function CallExpression(callee,args){this.type=syntax_1.Syntax.CallExpression,this.callee=callee,this.arguments=args}return CallExpression}();exports.CallExpression=CallExpression;var CatchClause=function(){function CatchClause(param,body){this.type=syntax_1.Syntax.CatchClause,this.param=param,this.body=body}return CatchClause}();exports.CatchClause=CatchClause;var ClassBody=function(){function ClassBody(body){this.type=syntax_1.Syntax.ClassBody,this.body=body}return ClassBody}();exports.ClassBody=ClassBody;var ClassDeclaration=function(){function ClassDeclaration(id,superClass,body){this.type=syntax_1.Syntax.ClassDeclaration,this.id=id,this.superClass=superClass,this.body=body}return ClassDeclaration}();exports.ClassDeclaration=ClassDeclaration;var ClassExpression=function(){function ClassExpression(id,superClass,body){this.type=syntax_1.Syntax.ClassExpression,this.id=id,this.superClass=superClass,this.body=body}return ClassExpression}();exports.ClassExpression=ClassExpression;var ComputedMemberExpression=function(){function ComputedMemberExpression(object,property){this.type=syntax_1.Syntax.MemberExpression,this.computed=!0,this.object=object,this.property=property}return ComputedMemberExpression}();exports.ComputedMemberExpression=ComputedMemberExpression;var ConditionalExpression=function(){function ConditionalExpression(test,consequent,alternate){this.type=syntax_1.Syntax.ConditionalExpression,this.test=test,this.consequent=consequent,this.alternate=alternate}return ConditionalExpression}();exports.ConditionalExpression=ConditionalExpression;var ContinueStatement=function(){function ContinueStatement(label){this.type=syntax_1.Syntax.ContinueStatement,this.label=label}return ContinueStatement}();exports.ContinueStatement=ContinueStatement;var DebuggerStatement=function(){function DebuggerStatement(){this.type=syntax_1.Syntax.DebuggerStatement}return DebuggerStatement}();exports.DebuggerStatement=DebuggerStatement;var Directive=function(){function Directive(expression,directive){this.type=syntax_1.Syntax.ExpressionStatement,this.expression=expression,this.directive=directive}return Directive}();exports.Directive=Directive;var DoWhileStatement=function(){function DoWhileStatement(body,test){this.type=syntax_1.Syntax.DoWhileStatement,this.body=body,this.test=test}return DoWhileStatement}();exports.DoWhileStatement=DoWhileStatement;var EmptyStatement=function(){function EmptyStatement(){this.type=syntax_1.Syntax.EmptyStatement}return EmptyStatement}();exports.EmptyStatement=EmptyStatement;var ExportAllDeclaration=function(){function ExportAllDeclaration(source){this.type=syntax_1.Syntax.ExportAllDeclaration,this.source=source}return ExportAllDeclaration}();exports.ExportAllDeclaration=ExportAllDeclaration;var ExportDefaultDeclaration=function(){function ExportDefaultDeclaration(declaration){this.type=syntax_1.Syntax.ExportDefaultDeclaration,this.declaration=declaration}return ExportDefaultDeclaration}();exports.ExportDefaultDeclaration=ExportDefaultDeclaration;var ExportNamedDeclaration=function(){function ExportNamedDeclaration(declaration,specifiers,source){this.type=syntax_1.Syntax.ExportNamedDeclaration,this.declaration=declaration,this.specifiers=specifiers,this.source=source}return ExportNamedDeclaration}();exports.ExportNamedDeclaration=ExportNamedDeclaration;var ExportSpecifier=function(){function ExportSpecifier(local,exported){this.type=syntax_1.Syntax.ExportSpecifier,this.exported=exported,this.local=local}return ExportSpecifier}();exports.ExportSpecifier=ExportSpecifier;var ExpressionStatement=function(){function ExpressionStatement(expression){this.type=syntax_1.Syntax.ExpressionStatement,this.expression=expression}return ExpressionStatement}();exports.ExpressionStatement=ExpressionStatement;var ForInStatement=function(){function ForInStatement(left,right,body){this.type=syntax_1.Syntax.ForInStatement,this.left=left,this.right=right,this.body=body,this.each=!1}return ForInStatement}();exports.ForInStatement=ForInStatement;var ForOfStatement=function(){function ForOfStatement(left,right,body){this.type=syntax_1.Syntax.ForOfStatement,this.left=left,this.right=right,this.body=body}return ForOfStatement}();exports.ForOfStatement=ForOfStatement;var ForStatement=function(){function ForStatement(init,test,update,body){this.type=syntax_1.Syntax.ForStatement,this.init=init,this.test=test,this.update=update,this.body=body}return ForStatement}();exports.ForStatement=ForStatement;var FunctionDeclaration=function(){function FunctionDeclaration(id,params,body,generator){this.type=syntax_1.Syntax.FunctionDeclaration,this.id=id,this.params=params,this.body=body,this.generator=generator,this.expression=!1}return FunctionDeclaration}();exports.FunctionDeclaration=FunctionDeclaration;var FunctionExpression=function(){function FunctionExpression(id,params,body,generator){this.type=syntax_1.Syntax.FunctionExpression,this.id=id,this.params=params,this.body=body,this.generator=generator,this.expression=!1}return FunctionExpression}();exports.FunctionExpression=FunctionExpression;var Identifier=function(){function Identifier(name){this.type=syntax_1.Syntax.Identifier,this.name=name}return Identifier}();exports.Identifier=Identifier;var IfStatement=function(){function IfStatement(test,consequent,alternate){this.type=syntax_1.Syntax.IfStatement,this.test=test,this.consequent=consequent,this.alternate=alternate}return IfStatement}();exports.IfStatement=IfStatement;var ImportDeclaration=function(){function ImportDeclaration(specifiers,source){this.type=syntax_1.Syntax.ImportDeclaration,this.specifiers=specifiers,this.source=source}return ImportDeclaration}();exports.ImportDeclaration=ImportDeclaration;var ImportDefaultSpecifier=function(){function ImportDefaultSpecifier(local){this.type=syntax_1.Syntax.ImportDefaultSpecifier,this.local=local}return ImportDefaultSpecifier}();exports.ImportDefaultSpecifier=ImportDefaultSpecifier;var ImportNamespaceSpecifier=function(){function ImportNamespaceSpecifier(local){this.type=syntax_1.Syntax.ImportNamespaceSpecifier,this.local=local}return ImportNamespaceSpecifier}();exports.ImportNamespaceSpecifier=ImportNamespaceSpecifier;var ImportSpecifier=function(){function ImportSpecifier(local,imported){this.type=syntax_1.Syntax.ImportSpecifier,this.local=local,this.imported=imported}return ImportSpecifier}();exports.ImportSpecifier=ImportSpecifier;var LabeledStatement=function(){function LabeledStatement(label,body){this.type=syntax_1.Syntax.LabeledStatement,this.label=label,this.body=body}return LabeledStatement}();exports.LabeledStatement=LabeledStatement;var Literal=function(){function Literal(value,raw){this.type=syntax_1.Syntax.Literal,this.value=value,this.raw=raw}return Literal}();exports.Literal=Literal;var MetaProperty=function(){function MetaProperty(meta,property){this.type=syntax_1.Syntax.MetaProperty,this.meta=meta,this.property=property}return MetaProperty}();exports.MetaProperty=MetaProperty;var MethodDefinition=function(){function MethodDefinition(key,computed,value,kind,isStatic){this.type=syntax_1.Syntax.MethodDefinition,this.key=key,this.computed=computed,this.value=value,this.kind=kind,this.static=isStatic}return MethodDefinition}();exports.MethodDefinition=MethodDefinition;var NewExpression=function(){function NewExpression(callee,args){this.type=syntax_1.Syntax.NewExpression,this.callee=callee,this.arguments=args}return NewExpression}();exports.NewExpression=NewExpression;var ObjectExpression=function(){function ObjectExpression(properties){this.type=syntax_1.Syntax.ObjectExpression,this.properties=properties}return ObjectExpression}();exports.ObjectExpression=ObjectExpression;var ObjectPattern=function(){function ObjectPattern(properties){this.type=syntax_1.Syntax.ObjectPattern,this.properties=properties}return ObjectPattern}();exports.ObjectPattern=ObjectPattern;var Program=function(){function Program(body,sourceType){this.type=syntax_1.Syntax.Program,this.body=body,this.sourceType=sourceType}return Program}();exports.Program=Program;var Property=function(){function Property(kind,key,computed,value,method,shorthand){this.type=syntax_1.Syntax.Property,this.key=key,this.computed=computed,this.value=value,this.kind=kind,this.method=method,this.shorthand=shorthand}return Property}();exports.Property=Property;var RegexLiteral=function(){function RegexLiteral(value,raw,regex){this.type=syntax_1.Syntax.Literal,this.value=value,this.raw=raw,this.regex=regex}return RegexLiteral}();exports.RegexLiteral=RegexLiteral;var RestElement=function(){function RestElement(argument){this.type=syntax_1.Syntax.RestElement,this.argument=argument}return RestElement}();exports.RestElement=RestElement;var ReturnStatement=function(){function ReturnStatement(argument){this.type=syntax_1.Syntax.ReturnStatement,this.argument=argument}return ReturnStatement}();exports.ReturnStatement=ReturnStatement;var SequenceExpression=function(){function SequenceExpression(expressions){this.type=syntax_1.Syntax.SequenceExpression,this.expressions=expressions}return SequenceExpression}();exports.SequenceExpression=SequenceExpression;var SpreadElement=function(){function SpreadElement(argument){this.type=syntax_1.Syntax.SpreadElement,this.argument=argument}return SpreadElement}();exports.SpreadElement=SpreadElement;var StaticMemberExpression=function(){function StaticMemberExpression(object,property){this.type=syntax_1.Syntax.MemberExpression,this.computed=!1,this.object=object,this.property=property}return StaticMemberExpression}();exports.StaticMemberExpression=StaticMemberExpression;var Super=function(){function Super(){this.type=syntax_1.Syntax.Super}return Super}();exports.Super=Super;var SwitchCase=function(){function SwitchCase(test,consequent){this.type=syntax_1.Syntax.SwitchCase,this.test=test,this.consequent=consequent}return SwitchCase}();exports.SwitchCase=SwitchCase;var SwitchStatement=function(){function SwitchStatement(discriminant,cases){this.type=syntax_1.Syntax.SwitchStatement,this.discriminant=discriminant,this.cases=cases}return SwitchStatement}();exports.SwitchStatement=SwitchStatement;var TaggedTemplateExpression=function(){function TaggedTemplateExpression(tag,quasi){this.type=syntax_1.Syntax.TaggedTemplateExpression,this.tag=tag,this.quasi=quasi}return TaggedTemplateExpression}();exports.TaggedTemplateExpression=TaggedTemplateExpression;var TemplateElement=function(){function TemplateElement(value,tail){this.type=syntax_1.Syntax.TemplateElement,this.value=value,this.tail=tail}return TemplateElement}();exports.TemplateElement=TemplateElement;var TemplateLiteral=function(){function TemplateLiteral(quasis,expressions){this.type=syntax_1.Syntax.TemplateLiteral,this.quasis=quasis,this.expressions=expressions}return TemplateLiteral}();exports.TemplateLiteral=TemplateLiteral;var ThisExpression=function(){function ThisExpression(){this.type=syntax_1.Syntax.ThisExpression}return ThisExpression}();exports.ThisExpression=ThisExpression;var ThrowStatement=function(){function ThrowStatement(argument){this.type=syntax_1.Syntax.ThrowStatement,this.argument=argument}return ThrowStatement}();exports.ThrowStatement=ThrowStatement;var TryStatement=function(){function TryStatement(block,handler,finalizer){this.type=syntax_1.Syntax.TryStatement,this.block=block,this.handler=handler,this.finalizer=finalizer}return TryStatement}();exports.TryStatement=TryStatement;var UnaryExpression=function(){function UnaryExpression(operator,argument){this.type=syntax_1.Syntax.UnaryExpression,this.operator=operator,this.argument=argument,this.prefix=!0}return UnaryExpression}();exports.UnaryExpression=UnaryExpression;var UpdateExpression=function(){function UpdateExpression(operator,argument,prefix){this.type=syntax_1.Syntax.UpdateExpression,this.operator=operator,this.argument=argument,this.prefix=prefix}return UpdateExpression}();exports.UpdateExpression=UpdateExpression;var VariableDeclaration=function(){function VariableDeclaration(declarations,kind){this.type=syntax_1.Syntax.VariableDeclaration,this.declarations=declarations,this.kind=kind}return VariableDeclaration}();exports.VariableDeclaration=VariableDeclaration;var VariableDeclarator=function(){function VariableDeclarator(id,init){this.type=syntax_1.Syntax.VariableDeclarator,this.id=id,this.init=init}return VariableDeclarator}();exports.VariableDeclarator=VariableDeclarator;var WhileStatement=function(){function WhileStatement(test,body){this.type=syntax_1.Syntax.WhileStatement,this.test=test,this.body=body}return WhileStatement}();exports.WhileStatement=WhileStatement;var WithStatement=function(){function WithStatement(object,body){this.type=syntax_1.Syntax.WithStatement,this.object=object,this.body=body}return WithStatement}();exports.WithStatement=WithStatement;var YieldExpression=function(){function YieldExpression(argument,delegate){this.type=syntax_1.Syntax.YieldExpression,this.argument=argument,this.delegate=delegate}return YieldExpression}();exports.YieldExpression=YieldExpression},function(module,exports,__webpack_require__){"use strict";function getQualifiedElementName(elementName){var qualifiedName;switch(elementName.type){case jsx_syntax_1.JSXSyntax.JSXIdentifier:var id=elementName;qualifiedName=id.name;break;case jsx_syntax_1.JSXSyntax.JSXNamespacedName:var ns=elementName;qualifiedName=getQualifiedElementName(ns.namespace)+":"+getQualifiedElementName(ns.name);break;case jsx_syntax_1.JSXSyntax.JSXMemberExpression:var expr=elementName;qualifiedName=getQualifiedElementName(expr.object)+"."+getQualifiedElementName(expr.property)}return qualifiedName}var JSXToken,__extends=this&&this.__extends||function(d,b){function __(){this.constructor=d}for(var p in b)b.hasOwnProperty(p)&&(d[p]=b[p]);d.prototype=null===b?Object.create(b):(__.prototype=b.prototype,new __)},character_1=__webpack_require__(9),token_1=__webpack_require__(7),parser_1=__webpack_require__(3),xhtml_entities_1=__webpack_require__(12),jsx_syntax_1=__webpack_require__(13),Node=__webpack_require__(10),JSXNode=__webpack_require__(14);!function(JSXToken){JSXToken[JSXToken.Identifier=100]="Identifier",JSXToken[JSXToken.Text=101]="Text"}(JSXToken||(JSXToken={})),token_1.TokenName[JSXToken.Identifier]="JSXIdentifier",token_1.TokenName[JSXToken.Text]="JSXText";var JSXParser=function(_super){function JSXParser(code,options,delegate){_super.call(this,code,options,delegate)}return __extends(JSXParser,_super),JSXParser.prototype.parsePrimaryExpression=function(){return this.match("<")?this.parseJSXRoot():_super.prototype.parsePrimaryExpression.call(this)},JSXParser.prototype.startJSX=function(){this.scanner.index=this.startMarker.index,this.scanner.lineNumber=this.startMarker.lineNumber,this.scanner.lineStart=this.startMarker.lineStart},JSXParser.prototype.finishJSX=function(){this.nextToken()},JSXParser.prototype.reenterJSX=function(){this.startJSX(),this.expectJSX("}"),this.config.tokens&&this.tokens.pop()},JSXParser.prototype.createJSXNode=function(){return this.collectComments(),{index:this.scanner.index,line:this.scanner.lineNumber,column:this.scanner.index-this.scanner.lineStart}},JSXParser.prototype.createJSXChildNode=function(){return{index:this.scanner.index,line:this.scanner.lineNumber,column:this.scanner.index-this.scanner.lineStart}},JSXParser.prototype.scanXHTMLEntity=function(quote){for(var result="&",valid=!0,terminated=!1,numeric=!1,hex=!1;!this.scanner.eof()&&valid&&!terminated;){var ch=this.scanner.source[this.scanner.index];if(ch===quote)break;if(terminated=";"===ch,result+=ch,++this.scanner.index,!terminated)switch(result.length){case 2:numeric="#"===ch;break;case 3:numeric&&(hex="x"===ch,valid=hex||character_1.Character.isDecimalDigit(ch.charCodeAt(0)),numeric=numeric&&!hex);break;default:valid=valid&&!(numeric&&!character_1.Character.isDecimalDigit(ch.charCodeAt(0))),valid=valid&&!(hex&&!character_1.Character.isHexDigit(ch.charCodeAt(0)))}}if(valid&&terminated&&result.length>2){var str=result.substr(1,result.length-2);numeric&&str.length>1?result=String.fromCharCode(parseInt(str.substr(1),10)):hex&&str.length>2?result=String.fromCharCode(parseInt("0"+str.substr(1),16)):numeric||hex||!xhtml_entities_1.XHTMLEntities[str]||(result=xhtml_entities_1.XHTMLEntities[str])}return result},JSXParser.prototype.lexJSX=function(){var cp=this.scanner.source.charCodeAt(this.scanner.index);if(60===cp||62===cp||47===cp||58===cp||61===cp||123===cp||125===cp){var value=this.scanner.source[this.scanner.index++];return{type:token_1.Token.Punctuator,value:value,lineNumber:this.scanner.lineNumber,lineStart:this.scanner.lineStart,start:this.scanner.index-1,end:this.scanner.index}}if(34===cp||39===cp){for(var start=this.scanner.index,quote=this.scanner.source[this.scanner.index++],str="";!this.scanner.eof();){var ch=this.scanner.source[this.scanner.index++];if(ch===quote)break;str+="&"===ch?this.scanXHTMLEntity(quote):ch}return{type:token_1.Token.StringLiteral,value:str,lineNumber:this.scanner.lineNumber,lineStart:this.scanner.lineStart,start:start,end:this.scanner.index}}if(46===cp){var n1=this.scanner.source.charCodeAt(this.scanner.index+1),n2=this.scanner.source.charCodeAt(this.scanner.index+2),value=46===n1&&46===n2?"...":".",start=this.scanner.index;return this.scanner.index+=value.length,{type:token_1.Token.Punctuator,value:value,lineNumber:this.scanner.lineNumber,lineStart:this.scanner.lineStart,start:start,end:this.scanner.index}}if(96===cp)return{type:token_1.Token.Template,lineNumber:this.scanner.lineNumber,lineStart:this.scanner.lineStart,start:this.scanner.index,end:this.scanner.index};if(character_1.Character.isIdentifierStart(cp)&&92!==cp){var start=this.scanner.index;for(++this.scanner.index;!this.scanner.eof();){var ch=this.scanner.source.charCodeAt(this.scanner.index);if(character_1.Character.isIdentifierPart(ch)&&92!==ch)++this.scanner.index;else{if(45!==ch)break;++this.scanner.index}}var id=this.scanner.source.slice(start,this.scanner.index);return{type:JSXToken.Identifier,value:id,lineNumber:this.scanner.lineNumber,lineStart:this.scanner.lineStart,start:start,end:this.scanner.index}}this.scanner.throwUnexpectedToken()},JSXParser.prototype.nextJSXToken=function(){this.collectComments(),this.startMarker.index=this.scanner.index,this.startMarker.lineNumber=this.scanner.lineNumber,this.startMarker.lineStart=this.scanner.lineStart;var token=this.lexJSX();return this.lastMarker.index=this.scanner.index,this.lastMarker.lineNumber=this.scanner.lineNumber,this.lastMarker.lineStart=this.scanner.lineStart,this.config.tokens&&this.tokens.push(this.convertToken(token)),token},JSXParser.prototype.nextJSXText=function(){this.startMarker.index=this.scanner.index,this.startMarker.lineNumber=this.scanner.lineNumber,this.startMarker.lineStart=this.scanner.lineStart;for(var start=this.scanner.index,text="";!this.scanner.eof();){var ch=this.scanner.source[this.scanner.index];if("{"===ch||"<"===ch)break;++this.scanner.index,text+=ch,character_1.Character.isLineTerminator(ch.charCodeAt(0))&&(++this.scanner.lineNumber,"\r"===ch&&"\n"===this.scanner.source[this.scanner.index]&&++this.scanner.index,this.scanner.lineStart=this.scanner.index)}this.lastMarker.index=this.scanner.index,this.lastMarker.lineNumber=this.scanner.lineNumber,this.lastMarker.lineStart=this.scanner.lineStart;var token={type:JSXToken.Text,value:text,lineNumber:this.scanner.lineNumber,lineStart:this.scanner.lineStart,start:start,end:this.scanner.index};return text.length>0&&this.config.tokens&&this.tokens.push(this.convertToken(token)),token},JSXParser.prototype.peekJSXToken=function(){var previousIndex=this.scanner.index,previousLineNumber=this.scanner.lineNumber,previousLineStart=this.scanner.lineStart;this.scanner.scanComments();var next=this.lexJSX();return this.scanner.index=previousIndex,this.scanner.lineNumber=previousLineNumber,this.scanner.lineStart=previousLineStart,next},JSXParser.prototype.expectJSX=function(value){var token=this.nextJSXToken();token.type===token_1.Token.Punctuator&&token.value===value||this.throwUnexpectedToken(token)},JSXParser.prototype.matchJSX=function(value){var next=this.peekJSXToken();return next.type===token_1.Token.Punctuator&&next.value===value},JSXParser.prototype.parseJSXIdentifier=function(){var node=this.createJSXNode(),token=this.nextJSXToken();return token.type!==JSXToken.Identifier&&this.throwUnexpectedToken(token),this.finalize(node,new JSXNode.JSXIdentifier(token.value))},JSXParser.prototype.parseJSXElementName=function(){var node=this.createJSXNode(),elementName=this.parseJSXIdentifier();if(this.matchJSX(":")){var namespace=elementName;this.expectJSX(":");var name_1=this.parseJSXIdentifier();elementName=this.finalize(node,new JSXNode.JSXNamespacedName(namespace,name_1))}else if(this.matchJSX("."))for(;this.matchJSX(".");){var object=elementName;this.expectJSX(".");var property=this.parseJSXIdentifier();elementName=this.finalize(node,new JSXNode.JSXMemberExpression(object,property))}return elementName},JSXParser.prototype.parseJSXAttributeName=function(){var attributeName,node=this.createJSXNode(),identifier=this.parseJSXIdentifier();if(this.matchJSX(":")){var namespace=identifier;this.expectJSX(":");var name_2=this.parseJSXIdentifier();attributeName=this.finalize(node,new JSXNode.JSXNamespacedName(namespace,name_2))}else attributeName=identifier;return attributeName},JSXParser.prototype.parseJSXStringLiteralAttribute=function(){var node=this.createJSXNode(),token=this.nextJSXToken();token.type!==token_1.Token.StringLiteral&&this.throwUnexpectedToken(token);var raw=this.getTokenRaw(token);return this.finalize(node,new Node.Literal(token.value,raw))},JSXParser.prototype.parseJSXExpressionAttribute=function(){var node=this.createJSXNode();this.expectJSX("{"),this.finishJSX(),this.match("}")&&this.tolerateError("JSX attributes must only be assigned a non-empty expression");var expression=this.parseAssignmentExpression();return this.reenterJSX(),this.finalize(node,new JSXNode.JSXExpressionContainer(expression))},JSXParser.prototype.parseJSXAttributeValue=function(){return this.matchJSX("{")?this.parseJSXExpressionAttribute():this.matchJSX("<")?this.parseJSXElement():this.parseJSXStringLiteralAttribute()},JSXParser.prototype.parseJSXNameValueAttribute=function(){var node=this.createJSXNode(),name=this.parseJSXAttributeName(),value=null;return this.matchJSX("=")&&(this.expectJSX("="),value=this.parseJSXAttributeValue()),this.finalize(node,new JSXNode.JSXAttribute(name,value))},JSXParser.prototype.parseJSXSpreadAttribute=function(){var node=this.createJSXNode();this.expectJSX("{"),this.expectJSX("..."),this.finishJSX();var argument=this.parseAssignmentExpression();return this.reenterJSX(),this.finalize(node,new JSXNode.JSXSpreadAttribute(argument))},JSXParser.prototype.parseJSXAttributes=function(){for(var attributes=[];!this.matchJSX("/")&&!this.matchJSX(">");){var attribute=this.matchJSX("{")?this.parseJSXSpreadAttribute():this.parseJSXNameValueAttribute();attributes.push(attribute)}return attributes},JSXParser.prototype.parseJSXOpeningElement=function(){var node=this.createJSXNode();this.expectJSX("<");var name=this.parseJSXElementName(),attributes=this.parseJSXAttributes(),selfClosing=this.matchJSX("/");return selfClosing&&this.expectJSX("/"),this.expectJSX(">"),this.finalize(node,new JSXNode.JSXOpeningElement(name,selfClosing,attributes))},JSXParser.prototype.parseJSXBoundaryElement=function(){var node=this.createJSXNode();if(this.expectJSX("<"),this.matchJSX("/")){this.expectJSX("/");var name_3=this.parseJSXElementName();return this.expectJSX(">"),this.finalize(node,new JSXNode.JSXClosingElement(name_3))}var name=this.parseJSXElementName(),attributes=this.parseJSXAttributes(),selfClosing=this.matchJSX("/");return selfClosing&&this.expectJSX("/"),this.expectJSX(">"),this.finalize(node,new JSXNode.JSXOpeningElement(name,selfClosing,attributes))},JSXParser.prototype.parseJSXEmptyExpression=function(){var node=this.createJSXChildNode();return this.collectComments(),this.lastMarker.index=this.scanner.index,this.lastMarker.lineNumber=this.scanner.lineNumber,this.lastMarker.lineStart=this.scanner.lineStart,this.finalize(node,new JSXNode.JSXEmptyExpression)},JSXParser.prototype.parseJSXExpressionContainer=function(){var node=this.createJSXNode();this.expectJSX("{");var expression;return this.matchJSX("}")?(expression=this.parseJSXEmptyExpression(),this.expectJSX("}")):(this.finishJSX(),expression=this.parseAssignmentExpression(),this.reenterJSX()),this.finalize(node,new JSXNode.JSXExpressionContainer(expression))},JSXParser.prototype.parseJSXChildren=function(){for(var children=[];!this.scanner.eof();){var node=this.createJSXChildNode(),token=this.nextJSXText();if(token.start<token.end){var raw=this.getTokenRaw(token),child=this.finalize(node,new JSXNode.JSXText(token.value,raw));children.push(child)}if("{"!==this.scanner.source[this.scanner.index])break;var container=this.parseJSXExpressionContainer();children.push(container)}return children},JSXParser.prototype.parseComplexJSXElement=function(el){for(var stack=[];!this.scanner.eof();){el.children=el.children.concat(this.parseJSXChildren());var node=this.createJSXChildNode(),element=this.parseJSXBoundaryElement();if(element.type===jsx_syntax_1.JSXSyntax.JSXOpeningElement){var opening=element;if(opening.selfClosing){var child=this.finalize(node,new JSXNode.JSXElement(opening,[],null));el.children.push(child)}else stack.push(el),el={node:node,opening:opening,closing:null,children:[]}}if(element.type===jsx_syntax_1.JSXSyntax.JSXClosingElement){el.closing=element;var open_1=getQualifiedElementName(el.opening.name),close_1=getQualifiedElementName(el.closing.name);if(open_1!==close_1&&this.tolerateError("Expected corresponding JSX closing tag for %0",open_1),!(stack.length>0))break;var child=this.finalize(el.node,new JSXNode.JSXElement(el.opening,el.children,el.closing));el=stack.pop(),el.children.push(child)}}return el},JSXParser.prototype.parseJSXElement=function(){var node=this.createJSXNode(),opening=this.parseJSXOpeningElement(),children=[],closing=null;if(!opening.selfClosing){var el=this.parseComplexJSXElement({node:node,opening:opening,closing:closing,children:children});children=el.children,closing=el.closing}return this.finalize(node,new JSXNode.JSXElement(opening,children,closing))},JSXParser.prototype.parseJSXRoot=function(){this.config.tokens&&this.tokens.pop(),this.startJSX();var element=this.parseJSXElement();return this.finishJSX(),element},JSXParser}(parser_1.Parser);exports.JSXParser=JSXParser},function(module,exports){"use strict";exports.XHTMLEntities={quot:'"',amp:"&",apos:"'",gt:">",nbsp:" ",iexcl:"¡",cent:"¢",pound:"£",curren:"¤",yen:"¥",brvbar:"¦",sect:"§",uml:"¨",copy:"©",ordf:"ª",laquo:"«",not:"¬",shy:"­",reg:"®",macr:"¯",deg:"°",plusmn:"±",sup2:"²",sup3:"³",acute:"´",micro:"µ",para:"¶",middot:"·",cedil:"¸",sup1:"¹",ordm:"º",raquo:"»",frac14:"¼",frac12:"½",frac34:"¾",iquest:"¿",Agrave:"À",Aacute:"Á",Acirc:"Â",Atilde:"Ã",Auml:"Ä",Aring:"Å",AElig:"Æ",Ccedil:"Ç",Egrave:"È",Eacute:"É",Ecirc:"Ê",Euml:"Ë",Igrave:"Ì",Iacute:"Í",Icirc:"Î",Iuml:"Ï",ETH:"Ð",Ntilde:"Ñ",Ograve:"Ò",Oacute:"Ó",Ocirc:"Ô",Otilde:"Õ",Ouml:"Ö",times:"×",Oslash:"Ø",Ugrave:"Ù",Uacute:"Ú",Ucirc:"Û",Uuml:"Ü",Yacute:"Ý",THORN:"Þ",szlig:"ß",agrave:"à",aacute:"á",acirc:"â",atilde:"ã",auml:"ä",aring:"å",aelig:"æ",ccedil:"ç",egrave:"è",eacute:"é",ecirc:"ê",euml:"ë",igrave:"ì",iacute:"í",icirc:"î",iuml:"ï",eth:"ð",ntilde:"ñ",ograve:"ò",oacute:"ó",ocirc:"ô",otilde:"õ",ouml:"ö",divide:"÷",oslash:"ø",ugrave:"ù",uacute:"ú",ucirc:"û",uuml:"ü",yacute:"ý",thorn:"þ",yuml:"ÿ",OElig:"Œ",oelig:"œ",Scaron:"Š",scaron:"š",Yuml:"Ÿ",fnof:"ƒ",circ:"ˆ",tilde:"˜",Alpha:"Α",Beta:"Β",Gamma:"Γ",Delta:"Δ",Epsilon:"Ε",Zeta:"Ζ",Eta:"Η",Theta:"Θ",Iota:"Ι",Kappa:"Κ",Lambda:"Λ",Mu:"Μ",Nu:"Ν",Xi:"Ξ",Omicron:"Ο",Pi:"Π",Rho:"Ρ",Sigma:"Σ",Tau:"Τ",Upsilon:"Υ",Phi:"Φ",Chi:"Χ",Psi:"Ψ",Omega:"Ω",alpha:"α",beta:"β",gamma:"γ",delta:"δ",epsilon:"ε",zeta:"ζ",eta:"η",theta:"θ",iota:"ι",kappa:"κ",lambda:"λ",mu:"μ",nu:"ν",xi:"ξ",omicron:"ο",pi:"π",rho:"ρ",sigmaf:"ς",sigma:"σ",tau:"τ",upsilon:"υ",phi:"φ",chi:"χ",psi:"ψ",omega:"ω",thetasym:"ϑ",upsih:"ϒ",piv:"ϖ",ensp:" ",emsp:" ",thinsp:" ",zwnj:"‌",zwj:"‍",lrm:"‎",rlm:"‏",ndash:"–",mdash:"—",lsquo:"‘",rsquo:"’",sbquo:"‚",ldquo:"“",rdquo:"”",bdquo:"„",dagger:"†",Dagger:"‡",bull:"•",hellip:"…",permil:"‰",prime:"′",Prime:"″",lsaquo:"‹",rsaquo:"›",oline:"‾",frasl:"⁄",euro:"€",image:"ℑ",weierp:"℘",real:"ℜ",trade:"™",alefsym:"ℵ",larr:"←",uarr:"↑",rarr:"→",darr:"↓",harr:"↔",crarr:"↵",lArr:"⇐",uArr:"⇑",rArr:"⇒",dArr:"⇓",hArr:"⇔",forall:"∀",part:"∂",exist:"∃",empty:"∅",nabla:"∇",isin:"∈",notin:"∉",ni:"∋",prod:"∏",sum:"∑",minus:"−",lowast:"∗",radic:"√",prop:"∝",infin:"∞",ang:"∠",and:"∧",or:"∨",cap:"∩",cup:"∪",int:"∫",there4:"∴",sim:"∼",cong:"≅",asymp:"≈",ne:"≠",equiv:"≡",le:"≤",ge:"≥",sub:"⊂",sup:"⊃",nsub:"⊄",sube:"⊆",supe:"⊇",oplus:"⊕",otimes:"⊗",perp:"⊥",sdot:"⋅",lceil:"⌈",rceil:"⌉",lfloor:"⌊",rfloor:"⌋",loz:"◊",spades:"♠",clubs:"♣",hearts:"♥",diams:"♦",lang:"⟨",rang:"⟩"}},function(module,exports){"use strict";exports.JSXSyntax={
JSXAttribute:"JSXAttribute",JSXClosingElement:"JSXClosingElement",JSXElement:"JSXElement",JSXEmptyExpression:"JSXEmptyExpression",JSXExpressionContainer:"JSXExpressionContainer",JSXIdentifier:"JSXIdentifier",JSXMemberExpression:"JSXMemberExpression",JSXNamespacedName:"JSXNamespacedName",JSXOpeningElement:"JSXOpeningElement",JSXSpreadAttribute:"JSXSpreadAttribute",JSXText:"JSXText"}},function(module,exports,__webpack_require__){"use strict";var jsx_syntax_1=__webpack_require__(13),JSXClosingElement=function(){function JSXClosingElement(name){this.type=jsx_syntax_1.JSXSyntax.JSXClosingElement,this.name=name}return JSXClosingElement}();exports.JSXClosingElement=JSXClosingElement;var JSXElement=function(){function JSXElement(openingElement,children,closingElement){this.type=jsx_syntax_1.JSXSyntax.JSXElement,this.openingElement=openingElement,this.children=children,this.closingElement=closingElement}return JSXElement}();exports.JSXElement=JSXElement;var JSXEmptyExpression=function(){function JSXEmptyExpression(){this.type=jsx_syntax_1.JSXSyntax.JSXEmptyExpression}return JSXEmptyExpression}();exports.JSXEmptyExpression=JSXEmptyExpression;var JSXExpressionContainer=function(){function JSXExpressionContainer(expression){this.type=jsx_syntax_1.JSXSyntax.JSXExpressionContainer,this.expression=expression}return JSXExpressionContainer}();exports.JSXExpressionContainer=JSXExpressionContainer;var JSXIdentifier=function(){function JSXIdentifier(name){this.type=jsx_syntax_1.JSXSyntax.JSXIdentifier,this.name=name}return JSXIdentifier}();exports.JSXIdentifier=JSXIdentifier;var JSXMemberExpression=function(){function JSXMemberExpression(object,property){this.type=jsx_syntax_1.JSXSyntax.JSXMemberExpression,this.object=object,this.property=property}return JSXMemberExpression}();exports.JSXMemberExpression=JSXMemberExpression;var JSXAttribute=function(){function JSXAttribute(name,value){this.type=jsx_syntax_1.JSXSyntax.JSXAttribute,this.name=name,this.value=value}return JSXAttribute}();exports.JSXAttribute=JSXAttribute;var JSXNamespacedName=function(){function JSXNamespacedName(namespace,name){this.type=jsx_syntax_1.JSXSyntax.JSXNamespacedName,this.namespace=namespace,this.name=name}return JSXNamespacedName}();exports.JSXNamespacedName=JSXNamespacedName;var JSXOpeningElement=function(){function JSXOpeningElement(name,selfClosing,attributes){this.type=jsx_syntax_1.JSXSyntax.JSXOpeningElement,this.name=name,this.selfClosing=selfClosing,this.attributes=attributes}return JSXOpeningElement}();exports.JSXOpeningElement=JSXOpeningElement;var JSXSpreadAttribute=function(){function JSXSpreadAttribute(argument){this.type=jsx_syntax_1.JSXSyntax.JSXSpreadAttribute,this.argument=argument}return JSXSpreadAttribute}();exports.JSXSpreadAttribute=JSXSpreadAttribute;var JSXText=function(){function JSXText(value,raw){this.type=jsx_syntax_1.JSXSyntax.JSXText,this.value=value,this.raw=raw}return JSXText}();exports.JSXText=JSXText},function(module,exports,__webpack_require__){"use strict";var scanner_1=__webpack_require__(8),error_handler_1=__webpack_require__(6),token_1=__webpack_require__(7),Reader=function(){function Reader(){this.values=[],this.curly=this.paren=-1}return Reader.prototype.beforeFunctionExpression=function(t){return["(","{","[","in","typeof","instanceof","new","return","case","delete","throw","void","=","+=","-=","*=","**=","/=","%=","<<=",">>=",">>>=","&=","|=","^=",",","+","-","*","**","/","%","++","--","<<",">>",">>>","&","|","^","!","~","&&","||","?",":","===","==",">=","<=","<",">","!=","!=="].indexOf(t)>=0},Reader.prototype.isRegexStart=function(){var previous=this.values[this.values.length-1],regex=null!==previous;switch(previous){case"this":case"]":regex=!1;break;case")":var check=this.values[this.paren-1];regex="if"===check||"while"===check||"for"===check||"with"===check;break;case"}":if(regex=!1,"function"===this.values[this.curly-3]){var check_1=this.values[this.curly-4];regex=!!check_1&&!this.beforeFunctionExpression(check_1)}else if("function"===this.values[this.curly-4]){var check_2=this.values[this.curly-5];regex=!check_2||!this.beforeFunctionExpression(check_2)}}return regex},Reader.prototype.push=function(token){token.type===token_1.Token.Punctuator||token.type===token_1.Token.Keyword?("{"===token.value?this.curly=this.values.length:"("===token.value&&(this.paren=this.values.length),this.values.push(token.value)):this.values.push(null)},Reader}(),Tokenizer=function(){function Tokenizer(code,config){this.errorHandler=new error_handler_1.ErrorHandler,this.errorHandler.tolerant=!!config&&("boolean"==typeof config.tolerant&&config.tolerant),this.scanner=new scanner_1.Scanner(code,this.errorHandler),this.scanner.trackComment=!!config&&("boolean"==typeof config.comment&&config.comment),this.trackRange=!!config&&("boolean"==typeof config.range&&config.range),this.trackLoc=!!config&&("boolean"==typeof config.loc&&config.loc),this.buffer=[],this.reader=new Reader}return Tokenizer.prototype.errors=function(){return this.errorHandler.errors},Tokenizer.prototype.getNextToken=function(){if(0===this.buffer.length){var comments=this.scanner.scanComments();if(this.scanner.trackComment)for(var i=0;i<comments.length;++i){var e=comments[i],comment=void 0,value=this.scanner.source.slice(e.slice[0],e.slice[1]);comment={type:e.multiLine?"BlockComment":"LineComment",value:value},this.trackRange&&(comment.range=e.range),this.trackLoc&&(comment.loc=e.loc),this.buffer.push(comment)}if(!this.scanner.eof()){var loc=void 0;this.trackLoc&&(loc={start:{line:this.scanner.lineNumber,column:this.scanner.index-this.scanner.lineStart},end:{}});var token=void 0;token="/"===this.scanner.source[this.scanner.index]?this.reader.isRegexStart()?this.scanner.scanRegExp():this.scanner.scanPunctuator():this.scanner.lex(),this.reader.push(token);var entry=void 0;entry={type:token_1.TokenName[token.type],value:this.scanner.source.slice(token.start,token.end)},this.trackRange&&(entry.range=[token.start,token.end]),this.trackLoc&&(loc.end={line:this.scanner.lineNumber,column:this.scanner.index-this.scanner.lineStart},entry.loc=loc),token.regex&&(entry.regex=token.regex),this.buffer.push(entry)}}return this.buffer.shift()},Tokenizer}();exports.Tokenizer=Tokenizer}])})}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,